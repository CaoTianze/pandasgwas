{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pandasGWAS Documentation pandasGWAS: a Python package for easy retrieval of GWAS Catalog data Functions to get GWAS Catlog data get_associations , get_variants , get_studies , get_traits Functions for set operation bind , intersect , set_diff , set_xor , union, set_equal Other functions get_child_efo , is_API_available , clear_cache Submodules summary_statistics : A set of unctions for easy retrieval of summary statistics data based on FTP data.","title":"pandasGWAS Documentation"},{"location":"#pandasgwas-documentation","text":"pandasGWAS: a Python package for easy retrieval of GWAS Catalog data","title":"pandasGWAS Documentation"},{"location":"#functions-to-get-gwas-catlog-data","text":"get_associations , get_variants , get_studies , get_traits","title":"Functions to get GWAS Catlog data"},{"location":"#functions-for-set-operation","text":"bind , intersect , set_diff , set_xor , union, set_equal","title":"Functions for set operation"},{"location":"#other-functions","text":"get_child_efo , is_API_available , clear_cache","title":"Other functions"},{"location":"#submodules","text":"summary_statistics : A set of unctions for easy retrieval of summary statistics data based on FTP data.","title":"Submodules"},{"location":"Association/","text":"pandasgwas.Association Association Python class to represent a set of GWAS Catalog Association. For more information, see \" GWAS CATALOG API Guide \" # get Association by study_id from pandasgwas.get_associations import get_associations associations = get_associations(study_id='GCST000854') Attributes: associations \u2013 pandas.DataFrame. A DataFrame to represent all queried Associations from GWAS Catalog REST API loci \u2013 pandas.DataFrame. A DataFrame to represent column loci from associations strongest_risk_alleles \u2013 pandas.DataFrame. A DataFrame to represent column strongest_risk_alleles from loci author_reported_genes \u2013 pandas.DataFrame. A DataFrame to represent column author_reported_genes from loci entrez_gene_ids \u2013 pandas.DataFrame. A DataFrame to represent column entrez_gene_ids from author_reported_genes ensembl_gene_ids \u2013 pandas.DataFrame. A DataFrame to represent column entrez_gene_ids from author_reported_genes","title":"Association"},{"location":"Association/#pandasgwas.Association","text":"","title":"Association"},{"location":"Association/#pandasgwas.Association.Association","text":"Python class to represent a set of GWAS Catalog Association. For more information, see \" GWAS CATALOG API Guide \" # get Association by study_id from pandasgwas.get_associations import get_associations associations = get_associations(study_id='GCST000854') Attributes: associations \u2013 pandas.DataFrame. A DataFrame to represent all queried Associations from GWAS Catalog REST API loci \u2013 pandas.DataFrame. A DataFrame to represent column loci from associations strongest_risk_alleles \u2013 pandas.DataFrame. A DataFrame to represent column strongest_risk_alleles from loci author_reported_genes \u2013 pandas.DataFrame. A DataFrame to represent column author_reported_genes from loci entrez_gene_ids \u2013 pandas.DataFrame. A DataFrame to represent column entrez_gene_ids from author_reported_genes ensembl_gene_ids \u2013 pandas.DataFrame. A DataFrame to represent column entrez_gene_ids from author_reported_genes","title":"Association"},{"location":"Browser/","text":"pandasgwas.Browser A set of helper functions for accessing web links open_gene_in_gwas_catalog open_gene_in_gwas_catalog ( gene_name : str ) -> bool Browse GWAS Catalog entitie Gene from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_gene_in_gwas_catalog('DPP6') Parameters: gene_name ( str ) \u2013 Gene name Returns: open_in_dbsnp open_in_dbsnp ( variant_id : str ) -> bool This function launches the web browser at dbSNP and opens a tab for SNP identifier from pandasgwas.Browser import * open_in_dbsnp('rs56261590') Parameters: variant_id ( str ) \u2013 A variant(Single Nucleotide Polymorphism) identifier Returns: open_in_gtex open_in_gtex ( variant_id : str ) -> bool This function launches the web browser at the GTEx Portal and opens a tab for SNP identifier. from pandasgwas.Browser import * open_in_gtex('rs56261590') Parameters: variant_id ( str ) \u2013 A variant(Single Nucleotide Polymorphism) identifier Returns: open_in_pubmed open_in_pubmed ( pubmed_id : str ) -> bool This function launches the web browser and opens a tab for PubMed citation from pandasgwas.Browser import * open_in_pubmed('26301688') Parameters: pubmed_id ( str ) \u2013 A PubMed identifier Returns: open_publication_in_gwas_catalog open_publication_in_gwas_catalog ( pubmed_id : str ) -> bool Browse GWAS Catalog entitie Publication from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_publication_in_gwas_catalog('25533513') Parameters: pubmed_id ( str ) \u2013 A PubMed identifier Returns: open_region_in_gwas_catalog open_region_in_gwas_catalog ( region_name_or_location : str , ) -> bool Browse GWAS Catalog entitie Region from the GWAS Web Graphical User Interface from pandasgwas.Browser import * #region_name open_region_in_gwas_catalog('2q37.1') #location open_region_in_gwas_catalog('chr2:230100001-234700000') Parameters: region_name_or_location ( str ) \u2013 Region name or chromosome and base pair location on the reference genome Returns: open_study_in_gwas_catalog open_study_in_gwas_catalog ( study_id : str ) -> bool Browse GWAS Catalog entitie Study from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_study_in_gwas_catalog('GCST000016') Parameters: study_id ( str ) \u2013 A Study identifier Returns: open_trait_in_gwas_catalog open_trait_in_gwas_catalog ( efo_id : str ) -> bool Browse GWAS Catalog entitie Trait from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_trait_in_gwas_catalog('EFO_0004884') Parameters: efo_id ( str ) \u2013 An EFO Trait identifier Returns: open_variant_in_gwas_catalog open_variant_in_gwas_catalog ( variant_id : str ) -> bool Browse GWAS Catalog entitie Single Nucleotide Polymorphism from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_variant_in_gwas_catalog('rs146992477') Parameters: variant_id ( str ) \u2013 A variant(Single Nucleotide Polymorphism) identifier Returns:","title":"Browser"},{"location":"Browser/#pandasgwas.Browser","text":"A set of helper functions for accessing web links","title":"Browser"},{"location":"Browser/#pandasgwas.Browser.open_gene_in_gwas_catalog","text":"open_gene_in_gwas_catalog ( gene_name : str ) -> bool Browse GWAS Catalog entitie Gene from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_gene_in_gwas_catalog('DPP6') Parameters: gene_name ( str ) \u2013 Gene name Returns:","title":"open_gene_in_gwas_catalog"},{"location":"Browser/#pandasgwas.Browser.open_in_dbsnp","text":"open_in_dbsnp ( variant_id : str ) -> bool This function launches the web browser at dbSNP and opens a tab for SNP identifier from pandasgwas.Browser import * open_in_dbsnp('rs56261590') Parameters: variant_id ( str ) \u2013 A variant(Single Nucleotide Polymorphism) identifier Returns:","title":"open_in_dbsnp"},{"location":"Browser/#pandasgwas.Browser.open_in_gtex","text":"open_in_gtex ( variant_id : str ) -> bool This function launches the web browser at the GTEx Portal and opens a tab for SNP identifier. from pandasgwas.Browser import * open_in_gtex('rs56261590') Parameters: variant_id ( str ) \u2013 A variant(Single Nucleotide Polymorphism) identifier Returns:","title":"open_in_gtex"},{"location":"Browser/#pandasgwas.Browser.open_in_pubmed","text":"open_in_pubmed ( pubmed_id : str ) -> bool This function launches the web browser and opens a tab for PubMed citation from pandasgwas.Browser import * open_in_pubmed('26301688') Parameters: pubmed_id ( str ) \u2013 A PubMed identifier Returns:","title":"open_in_pubmed"},{"location":"Browser/#pandasgwas.Browser.open_publication_in_gwas_catalog","text":"open_publication_in_gwas_catalog ( pubmed_id : str ) -> bool Browse GWAS Catalog entitie Publication from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_publication_in_gwas_catalog('25533513') Parameters: pubmed_id ( str ) \u2013 A PubMed identifier Returns:","title":"open_publication_in_gwas_catalog"},{"location":"Browser/#pandasgwas.Browser.open_region_in_gwas_catalog","text":"open_region_in_gwas_catalog ( region_name_or_location : str , ) -> bool Browse GWAS Catalog entitie Region from the GWAS Web Graphical User Interface from pandasgwas.Browser import * #region_name open_region_in_gwas_catalog('2q37.1') #location open_region_in_gwas_catalog('chr2:230100001-234700000') Parameters: region_name_or_location ( str ) \u2013 Region name or chromosome and base pair location on the reference genome Returns:","title":"open_region_in_gwas_catalog"},{"location":"Browser/#pandasgwas.Browser.open_study_in_gwas_catalog","text":"open_study_in_gwas_catalog ( study_id : str ) -> bool Browse GWAS Catalog entitie Study from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_study_in_gwas_catalog('GCST000016') Parameters: study_id ( str ) \u2013 A Study identifier Returns:","title":"open_study_in_gwas_catalog"},{"location":"Browser/#pandasgwas.Browser.open_trait_in_gwas_catalog","text":"open_trait_in_gwas_catalog ( efo_id : str ) -> bool Browse GWAS Catalog entitie Trait from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_trait_in_gwas_catalog('EFO_0004884') Parameters: efo_id ( str ) \u2013 An EFO Trait identifier Returns:","title":"open_trait_in_gwas_catalog"},{"location":"Browser/#pandasgwas.Browser.open_variant_in_gwas_catalog","text":"open_variant_in_gwas_catalog ( variant_id : str ) -> bool Browse GWAS Catalog entitie Single Nucleotide Polymorphism from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_variant_in_gwas_catalog('rs146992477') Parameters: variant_id ( str ) \u2013 A variant(Single Nucleotide Polymorphism) identifier Returns:","title":"open_variant_in_gwas_catalog"},{"location":"Study/","text":"pandasgwas.Study Study Python class to represent a set of GWAS Catalog Study. For more information, see \" GWAS CATALOG API Guide \" # get Study by study_id from pandasgwas.get_studies import get_studies studies = get_studies(study_id='GCST000854') Attributes: studies \u2013 pandas.DataFrame. A DataFrame to represent all queried Studies from GWAS Catalog REST API platforms \u2013 pandas.DataFrame. A DataFrame to represent column platforms from studies ancestries \u2013 pandas.DataFrame. A DataFrame to represent column ancestries from studies genotypingTechnologies \u2013 pandas.DataFrame. A DataFrame to represent column genotypingTechnologies from studies ancestralGroups \u2013 pandas.DataFrame. A DataFrame to represent column ancestralGroups from ancestries countriesOfOrigin \u2013 pandas.DataFrame. A DataFrame to represent column countriesOfOrigin from ancestries countriesOfRecruitment \u2013 pandas.DataFrame. A DataFrame to represent column countriesOfOrigin from ancestries","title":"Study"},{"location":"Study/#pandasgwas.Study","text":"","title":"Study"},{"location":"Study/#pandasgwas.Study.Study","text":"Python class to represent a set of GWAS Catalog Study. For more information, see \" GWAS CATALOG API Guide \" # get Study by study_id from pandasgwas.get_studies import get_studies studies = get_studies(study_id='GCST000854') Attributes: studies \u2013 pandas.DataFrame. A DataFrame to represent all queried Studies from GWAS Catalog REST API platforms \u2013 pandas.DataFrame. A DataFrame to represent column platforms from studies ancestries \u2013 pandas.DataFrame. A DataFrame to represent column ancestries from studies genotypingTechnologies \u2013 pandas.DataFrame. A DataFrame to represent column genotypingTechnologies from studies ancestralGroups \u2013 pandas.DataFrame. A DataFrame to represent column ancestralGroups from ancestries countriesOfOrigin \u2013 pandas.DataFrame. A DataFrame to represent column countriesOfOrigin from ancestries countriesOfRecruitment \u2013 pandas.DataFrame. A DataFrame to represent column countriesOfOrigin from ancestries","title":"Study"},{"location":"Trait/","text":"pandasgwas.Trait Trait Python class to represent a set of GWAS Catalog EFO Trait. For more information, see \" GWAS CATALOG API Guide \" # get Tait by study_id from pandasgwas.get_traits import get_traits traits = get_traits(study_id='GCST000854') Attributes: efo_traits \u2013 pandas.DataFrame. A DataFrame to represent all queried EFO Traits from GWAS Catalog REST API","title":"Trait"},{"location":"Trait/#pandasgwas.Trait","text":"","title":"Trait"},{"location":"Trait/#pandasgwas.Trait.Trait","text":"Python class to represent a set of GWAS Catalog EFO Trait. For more information, see \" GWAS CATALOG API Guide \" # get Tait by study_id from pandasgwas.get_traits import get_traits traits = get_traits(study_id='GCST000854') Attributes: efo_traits \u2013 pandas.DataFrame. A DataFrame to represent all queried EFO Traits from GWAS Catalog REST API","title":"Trait"},{"location":"Variant/","text":"pandasgwas.Variant Variant Python class to represent a set of GWAS Catalog Single Nucleotide Polymorphism. For more information, see \" GWAS CATALOG API Guide \" # get Single Nucleotide Polymorphism by study_id from pandasgwas.get_variants import get_variants snps = get_variants(study_id='GCST000854') Attributes: single_nucleotide_polymorphisms \u2013 pandas.DataFrame. A DataFrame to represent all queried Single Nucleotide Polymorphisms from GWAS Catalog REST API locations \u2013 pandas.DataFrame. A DataFrame to represent column locations from single_nucleotide_polymorphisms genomic_contexts \u2013 pandas.DataFrame. A DataFrame to represent column genomicContexts from single_nucleotide_polymorphisms ensembl_gene_ids \u2013 pandas.DataFrame. A DataFrame to represent column gene.ensemblGeneIds from genomic_contexts entrez_gene_ids \u2013 pandas.DataFrame. A DataFrame to represent column gene.entrezGeneIds from genomic_contexts","title":"Variant"},{"location":"Variant/#pandasgwas.Variant","text":"","title":"Variant"},{"location":"Variant/#pandasgwas.Variant.Variant","text":"Python class to represent a set of GWAS Catalog Single Nucleotide Polymorphism. For more information, see \" GWAS CATALOG API Guide \" # get Single Nucleotide Polymorphism by study_id from pandasgwas.get_variants import get_variants snps = get_variants(study_id='GCST000854') Attributes: single_nucleotide_polymorphisms \u2013 pandas.DataFrame. A DataFrame to represent all queried Single Nucleotide Polymorphisms from GWAS Catalog REST API locations \u2013 pandas.DataFrame. A DataFrame to represent column locations from single_nucleotide_polymorphisms genomic_contexts \u2013 pandas.DataFrame. A DataFrame to represent column genomicContexts from single_nucleotide_polymorphisms ensembl_gene_ids \u2013 pandas.DataFrame. A DataFrame to represent column gene.ensemblGeneIds from genomic_contexts entrez_gene_ids \u2013 pandas.DataFrame. A DataFrame to represent column gene.entrezGeneIds from genomic_contexts","title":"Variant"},{"location":"get_associations/","text":"pandasgwas.get_associations get_associations get_associations ( study_id : str = None , association_id : str = None , variant_id : str = None , efo_id : str = None , pubmed_id : str = None , efo_trait : str = None , set_operation : str = \"bind\" , interactive : bool = True , ) -> Association Retrieves Associations via the NHGRI-EBI GWAS Catalog REST API. The REST API is queried multiple times with the criteria passed as arguments. By default all Associations that match the criteria supplied in the arguments are retrieved: this corresponds to the default set_operation set to 'bind', If you rather have only the Associations that match simultaneously all criteria provided, then set set_operation to 'intersection'. from pandasgwas.get_associations import * associations = get_associations(association_id='16603') Parameters: study_id ( str , default: None ) \u2013 Study identifier, accessionId in Study association_id ( str , default: None ) \u2013 Association identifier, associationId in Association variant_id ( str , default: None ) \u2013 Single Nucleotide Polymorphism identifier, rsId in Single Nucleotide Polymorphism efo_id ( str , default: None ) \u2013 EFO Trait identifier, shortForm in EFO Trait pubmed_id ( str , default: None ) \u2013 PubMed identifier efo_trait ( str , default: None ) \u2013 Trait description set_operation ( str , default: 'bind' ) \u2013 \"bind\" or \"intersection\" interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Association \u2013 An Association object get_associations_all get_associations_all ( interactive : bool = True , ) -> Association Gets all associations from pandasgwas.get_associations import * associations = get_associations_all() Parameters: interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Association \u2013 An Association object get_associations_by_association_id get_associations_by_association_id ( association_id : str , interactive : bool = True ) -> Association Get GWAS Catalog Associations by their Association identifier from pandasgwas.get_associations import * associations = get_associations_by_association_id('16603') Parameters: association_id ( str ) \u2013 Association identifier, associationId in Association interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Association \u2013 An Association object get_associations_by_efo_id get_associations_by_efo_id ( efo_id : str , interactive : bool = True ) -> Association Get GWAS Catalog Associations by their EFO Trait identifier from pandasgwas.get_associations import * associations = get_associations_by_efo_id('EFO_0001065') Parameters: efo_id ( str ) \u2013 EFO Trait identifier, shortForm in EFO Trait interactive ( bool , default: True ) \u2013 indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Association \u2013 An Association object get_associations_by_efo_trait get_associations_by_efo_trait ( efo_trait : str , interactive : bool = True ) -> Association Gets associations that match trait description from pandasgwas.get_associations import * associations = get_associations_by_efo_trait('MHPG measurement') Parameters: efo_trait ( str ) \u2013 Trait description interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Association \u2013 An Association object get_associations_by_pubmed_id get_associations_by_pubmed_id ( pubmed_id : str , interactive : bool = True ) -> Association Get GWAS Catalog associations by PubMed identifiers from pandasgwas.get_associations import * associations = get_associations_by_pubmed_id('21041247') Parameters: pubmed_id ( str ) \u2013 PubMed identifier interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Association \u2013 An Association object get_associations_by_study_id get_associations_by_study_id ( study_id : str , interactive : bool = True ) -> Association Get GWAS Catalog Associations by Study identifier from pandasgwas.get_associations import * associations = get_associations_by_study_id('GCST000854') Parameters: study_id ( str ) \u2013 Study identifier, accessionId in Study interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Association \u2013 An Association object get_associations_by_variant_id get_associations_by_variant_id ( variant_id : str , interactive : bool = True ) -> Association Get GWAS Catalog Associations by their Single Nucleotide Polymorphism identifier from pandasgwas.get_associations import * associations = get_associations_by_variant_id('rs6538678') Parameters: variant_id ( str ) \u2013 Single Nucleotide Polymorphism identifier, rsId in Single Nucleotide Polymorphism interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Association \u2013 An Association object","title":"Get associations"},{"location":"get_associations/#pandasgwas.get_associations","text":"","title":"get_associations"},{"location":"get_associations/#pandasgwas.get_associations.get_associations","text":"get_associations ( study_id : str = None , association_id : str = None , variant_id : str = None , efo_id : str = None , pubmed_id : str = None , efo_trait : str = None , set_operation : str = \"bind\" , interactive : bool = True , ) -> Association Retrieves Associations via the NHGRI-EBI GWAS Catalog REST API. The REST API is queried multiple times with the criteria passed as arguments. By default all Associations that match the criteria supplied in the arguments are retrieved: this corresponds to the default set_operation set to 'bind', If you rather have only the Associations that match simultaneously all criteria provided, then set set_operation to 'intersection'. from pandasgwas.get_associations import * associations = get_associations(association_id='16603') Parameters: study_id ( str , default: None ) \u2013 Study identifier, accessionId in Study association_id ( str , default: None ) \u2013 Association identifier, associationId in Association variant_id ( str , default: None ) \u2013 Single Nucleotide Polymorphism identifier, rsId in Single Nucleotide Polymorphism efo_id ( str , default: None ) \u2013 EFO Trait identifier, shortForm in EFO Trait pubmed_id ( str , default: None ) \u2013 PubMed identifier efo_trait ( str , default: None ) \u2013 Trait description set_operation ( str , default: 'bind' ) \u2013 \"bind\" or \"intersection\" interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Association \u2013 An Association object","title":"get_associations"},{"location":"get_associations/#pandasgwas.get_associations.get_associations_all","text":"get_associations_all ( interactive : bool = True , ) -> Association Gets all associations from pandasgwas.get_associations import * associations = get_associations_all() Parameters: interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Association \u2013 An Association object","title":"get_associations_all"},{"location":"get_associations/#pandasgwas.get_associations.get_associations_by_association_id","text":"get_associations_by_association_id ( association_id : str , interactive : bool = True ) -> Association Get GWAS Catalog Associations by their Association identifier from pandasgwas.get_associations import * associations = get_associations_by_association_id('16603') Parameters: association_id ( str ) \u2013 Association identifier, associationId in Association interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Association \u2013 An Association object","title":"get_associations_by_association_id"},{"location":"get_associations/#pandasgwas.get_associations.get_associations_by_efo_id","text":"get_associations_by_efo_id ( efo_id : str , interactive : bool = True ) -> Association Get GWAS Catalog Associations by their EFO Trait identifier from pandasgwas.get_associations import * associations = get_associations_by_efo_id('EFO_0001065') Parameters: efo_id ( str ) \u2013 EFO Trait identifier, shortForm in EFO Trait interactive ( bool , default: True ) \u2013 indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Association \u2013 An Association object","title":"get_associations_by_efo_id"},{"location":"get_associations/#pandasgwas.get_associations.get_associations_by_efo_trait","text":"get_associations_by_efo_trait ( efo_trait : str , interactive : bool = True ) -> Association Gets associations that match trait description from pandasgwas.get_associations import * associations = get_associations_by_efo_trait('MHPG measurement') Parameters: efo_trait ( str ) \u2013 Trait description interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Association \u2013 An Association object","title":"get_associations_by_efo_trait"},{"location":"get_associations/#pandasgwas.get_associations.get_associations_by_pubmed_id","text":"get_associations_by_pubmed_id ( pubmed_id : str , interactive : bool = True ) -> Association Get GWAS Catalog associations by PubMed identifiers from pandasgwas.get_associations import * associations = get_associations_by_pubmed_id('21041247') Parameters: pubmed_id ( str ) \u2013 PubMed identifier interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Association \u2013 An Association object","title":"get_associations_by_pubmed_id"},{"location":"get_associations/#pandasgwas.get_associations.get_associations_by_study_id","text":"get_associations_by_study_id ( study_id : str , interactive : bool = True ) -> Association Get GWAS Catalog Associations by Study identifier from pandasgwas.get_associations import * associations = get_associations_by_study_id('GCST000854') Parameters: study_id ( str ) \u2013 Study identifier, accessionId in Study interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Association \u2013 An Association object","title":"get_associations_by_study_id"},{"location":"get_associations/#pandasgwas.get_associations.get_associations_by_variant_id","text":"get_associations_by_variant_id ( variant_id : str , interactive : bool = True ) -> Association Get GWAS Catalog Associations by their Single Nucleotide Polymorphism identifier from pandasgwas.get_associations import * associations = get_associations_by_variant_id('rs6538678') Parameters: variant_id ( str ) \u2013 Single Nucleotide Polymorphism identifier, rsId in Single Nucleotide Polymorphism interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Association \u2013 An Association object","title":"get_associations_by_variant_id"},{"location":"get_studies/","text":"pandasgwas.get_studies get_studies get_studies ( study_id : str = None , association_id : str = None , variant_id : str = None , efo_id : str = None , pubmed_id : str = None , user_requested : bool = None , full_pvalue_set : bool = None , efo_uri : str = None , efo_trait : str = None , reported_trait : str = None , set_operation : str = \"bind\" , interactive : bool = True , ) -> Study Retrieves Studies via the NHGRI-EBI GWAS Catalog REST API. The REST API is queried multiple times with the criteria passed as arguments. By default all Studies that match the criteria supplied in the arguments are retrieved: this corresponds to the default set_operation set to 'bind', If you rather have only the Studies that match simultaneously all criteria provided, then set set_operation to 'intersection'. from pandasgwas.get_studies import get_studies_by_study_id studies = get_studies(study_id='GCST000854') Parameters: study_id ( str , default: None ) \u2013 Study identifier, accessionId in Study association_id ( str , default: None ) \u2013 Association identifier, associationId in Association variant_id ( str , default: None ) \u2013 Single Nucleotide Polymorphism identifier, rsId in Single Nucleotide Polymorphism efo_id ( str , default: None ) \u2013 EFO Trait identifier, shortForm in EFO Trait pubmed_id ( str , default: None ) \u2013 PubMed identifier user_requested ( bool , default: None ) \u2013 Whether the addition of this study to the Catalog was requested by a user full_pvalue_set ( bool , default: None ) \u2013 Whether full summary statistics are available for this study efo_uri ( str , default: None ) \u2013 EFO URI efo_trait ( str , default: None ) \u2013 Trait description reported_trait ( str , default: None ) \u2013 Trait are reported by the original authors of the study set_operation ( str , default: 'bind' ) \u2013 \"bind\" or \"intersection\" interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object get_studies_all get_studies_all ( interactive : bool = True ) -> Study Gets all Studies from pandasgwas.get_studies import get_studies_all studies = get_studies_all() Parameters: interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object get_studies_by_association_id get_studies_by_association_id ( association_id : str , interactive : bool = True ) -> Study Get GWAS Catalog Studies by by their Association identifier from pandasgwas.get_studies import get_studies_by_association_id studies = get_studies_by_association_id('16510553') Parameters: association_id ( str ) \u2013 Association identifier, associationId in Association interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object get_studies_by_efo_id get_studies_by_efo_id ( efo_id : str , interactive : bool = True ) -> Study Get GWAS Catalog Studies by their EFO Trait identifier from pandasgwas.get_studies import get_studies_by_efo_id studies = get_studies_by_efo_id('EFO_0005133') Parameters: efo_id ( str ) \u2013 EFO Trait identifier, shortForm in EFO Trait interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object get_studies_by_efo_trait get_studies_by_efo_trait ( efo_trait : str , interactive : bool = True ) -> Study Get GWAS Catalog Studies that match trait description from pandasgwas.get_studies import get_studies_by_efo_trait studies = get_studies_by_efo_trait('MHPG measurement') Parameters: efo_trait ( str ) \u2013 Trait description interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object get_studies_by_efo_uri get_studies_by_efo_uri ( efo_uri : str , interactive : bool = True ) -> Study Get GWAS Catalog Studies by EFO URI from pandasgwas.get_studies import get_studies_by_efo_uri studies = get_studies_by_efo_uri('http://www.ebi.ac.uk/efo/EFO_0005133') Parameters: efo_uri ( str ) \u2013 EFO URI interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object get_studies_by_full_pvalue_set get_studies_by_full_pvalue_set ( full_pvalue_set : bool , interactive : bool = True ) -> Study Get GWAS Catalog Studies by full summary statistics criterion from pandasgwas.get_studies import get_studies_by_full_pvalue_set studies = get_studies_by_full_pvalue_set('False') Parameters: full_pvalue_set ( bool ) \u2013 Whether full summary statistics are available for this study interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object get_studies_by_pubmed_id get_studies_by_pubmed_id ( pubmed_id : str , interactive : bool = True ) -> Study Get GWAS Catalog Studies by PubMed identifiers from pandasgwas.get_studies import get_studies_by_pubmed_id studies = get_studies_by_pubmed_id('21041247') Parameters: pubmed_id ( str ) \u2013 PubMed identifier interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object get_studies_by_reported_trait get_studies_by_reported_trait ( reported_trait : str , interactive : bool = True ) -> Study Gets studies that match the reported traits, as reported by the original authors of the study. from pandasgwas.get_studies import get_studies_by_reported_trait studies = get_studies_by_reported_trait('Vitamin D levels') Parameters: reported_trait ( str ) \u2013 Trait are reported by the original authors of the study interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object get_studies_by_study_id get_studies_by_study_id ( study_id : str , interactive : bool = True ) -> Study Get GWAS Catalog Studies by Study identifier from pandasgwas.get_studies import get_studies_by_study_id studies = get_studies_by_study_id('GCST000854') Parameters: study_id ( str ) \u2013 Study identifier, accessionId in Study interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object get_studies_by_user_requested get_studies_by_user_requested ( user_requested : bool , interactive : bool = True ) -> Study Get GWAS Catalog Studies that have been requested by users or not from pandasgwas.get_studies import get_studies_by_user_requested studies = get_studies_by_user_requested('True') Parameters: user_requested ( bool ) \u2013 Whether the addition of this study to the Catalog was requested by a user interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object get_studies_by_variant_id get_studies_by_variant_id ( variant_id : str , interactive : bool = True ) -> Study Get GWAS Catalog Studies by Single Nucleotide Polymorphism identifier from pandasgwas.get_studies import get_studies_by_variant_id studies = get_studies_by_variant_id('rs7329174') Parameters: variant_id ( str ) \u2013 Single Nucleotide Polymorphism identifier, rsId in Single Nucleotide Polymorphism interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object","title":"Get studies"},{"location":"get_studies/#pandasgwas.get_studies","text":"","title":"get_studies"},{"location":"get_studies/#pandasgwas.get_studies.get_studies","text":"get_studies ( study_id : str = None , association_id : str = None , variant_id : str = None , efo_id : str = None , pubmed_id : str = None , user_requested : bool = None , full_pvalue_set : bool = None , efo_uri : str = None , efo_trait : str = None , reported_trait : str = None , set_operation : str = \"bind\" , interactive : bool = True , ) -> Study Retrieves Studies via the NHGRI-EBI GWAS Catalog REST API. The REST API is queried multiple times with the criteria passed as arguments. By default all Studies that match the criteria supplied in the arguments are retrieved: this corresponds to the default set_operation set to 'bind', If you rather have only the Studies that match simultaneously all criteria provided, then set set_operation to 'intersection'. from pandasgwas.get_studies import get_studies_by_study_id studies = get_studies(study_id='GCST000854') Parameters: study_id ( str , default: None ) \u2013 Study identifier, accessionId in Study association_id ( str , default: None ) \u2013 Association identifier, associationId in Association variant_id ( str , default: None ) \u2013 Single Nucleotide Polymorphism identifier, rsId in Single Nucleotide Polymorphism efo_id ( str , default: None ) \u2013 EFO Trait identifier, shortForm in EFO Trait pubmed_id ( str , default: None ) \u2013 PubMed identifier user_requested ( bool , default: None ) \u2013 Whether the addition of this study to the Catalog was requested by a user full_pvalue_set ( bool , default: None ) \u2013 Whether full summary statistics are available for this study efo_uri ( str , default: None ) \u2013 EFO URI efo_trait ( str , default: None ) \u2013 Trait description reported_trait ( str , default: None ) \u2013 Trait are reported by the original authors of the study set_operation ( str , default: 'bind' ) \u2013 \"bind\" or \"intersection\" interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object","title":"get_studies"},{"location":"get_studies/#pandasgwas.get_studies.get_studies_all","text":"get_studies_all ( interactive : bool = True ) -> Study Gets all Studies from pandasgwas.get_studies import get_studies_all studies = get_studies_all() Parameters: interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object","title":"get_studies_all"},{"location":"get_studies/#pandasgwas.get_studies.get_studies_by_association_id","text":"get_studies_by_association_id ( association_id : str , interactive : bool = True ) -> Study Get GWAS Catalog Studies by by their Association identifier from pandasgwas.get_studies import get_studies_by_association_id studies = get_studies_by_association_id('16510553') Parameters: association_id ( str ) \u2013 Association identifier, associationId in Association interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object","title":"get_studies_by_association_id"},{"location":"get_studies/#pandasgwas.get_studies.get_studies_by_efo_id","text":"get_studies_by_efo_id ( efo_id : str , interactive : bool = True ) -> Study Get GWAS Catalog Studies by their EFO Trait identifier from pandasgwas.get_studies import get_studies_by_efo_id studies = get_studies_by_efo_id('EFO_0005133') Parameters: efo_id ( str ) \u2013 EFO Trait identifier, shortForm in EFO Trait interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object","title":"get_studies_by_efo_id"},{"location":"get_studies/#pandasgwas.get_studies.get_studies_by_efo_trait","text":"get_studies_by_efo_trait ( efo_trait : str , interactive : bool = True ) -> Study Get GWAS Catalog Studies that match trait description from pandasgwas.get_studies import get_studies_by_efo_trait studies = get_studies_by_efo_trait('MHPG measurement') Parameters: efo_trait ( str ) \u2013 Trait description interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object","title":"get_studies_by_efo_trait"},{"location":"get_studies/#pandasgwas.get_studies.get_studies_by_efo_uri","text":"get_studies_by_efo_uri ( efo_uri : str , interactive : bool = True ) -> Study Get GWAS Catalog Studies by EFO URI from pandasgwas.get_studies import get_studies_by_efo_uri studies = get_studies_by_efo_uri('http://www.ebi.ac.uk/efo/EFO_0005133') Parameters: efo_uri ( str ) \u2013 EFO URI interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object","title":"get_studies_by_efo_uri"},{"location":"get_studies/#pandasgwas.get_studies.get_studies_by_full_pvalue_set","text":"get_studies_by_full_pvalue_set ( full_pvalue_set : bool , interactive : bool = True ) -> Study Get GWAS Catalog Studies by full summary statistics criterion from pandasgwas.get_studies import get_studies_by_full_pvalue_set studies = get_studies_by_full_pvalue_set('False') Parameters: full_pvalue_set ( bool ) \u2013 Whether full summary statistics are available for this study interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object","title":"get_studies_by_full_pvalue_set"},{"location":"get_studies/#pandasgwas.get_studies.get_studies_by_pubmed_id","text":"get_studies_by_pubmed_id ( pubmed_id : str , interactive : bool = True ) -> Study Get GWAS Catalog Studies by PubMed identifiers from pandasgwas.get_studies import get_studies_by_pubmed_id studies = get_studies_by_pubmed_id('21041247') Parameters: pubmed_id ( str ) \u2013 PubMed identifier interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object","title":"get_studies_by_pubmed_id"},{"location":"get_studies/#pandasgwas.get_studies.get_studies_by_reported_trait","text":"get_studies_by_reported_trait ( reported_trait : str , interactive : bool = True ) -> Study Gets studies that match the reported traits, as reported by the original authors of the study. from pandasgwas.get_studies import get_studies_by_reported_trait studies = get_studies_by_reported_trait('Vitamin D levels') Parameters: reported_trait ( str ) \u2013 Trait are reported by the original authors of the study interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object","title":"get_studies_by_reported_trait"},{"location":"get_studies/#pandasgwas.get_studies.get_studies_by_study_id","text":"get_studies_by_study_id ( study_id : str , interactive : bool = True ) -> Study Get GWAS Catalog Studies by Study identifier from pandasgwas.get_studies import get_studies_by_study_id studies = get_studies_by_study_id('GCST000854') Parameters: study_id ( str ) \u2013 Study identifier, accessionId in Study interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object","title":"get_studies_by_study_id"},{"location":"get_studies/#pandasgwas.get_studies.get_studies_by_user_requested","text":"get_studies_by_user_requested ( user_requested : bool , interactive : bool = True ) -> Study Get GWAS Catalog Studies that have been requested by users or not from pandasgwas.get_studies import get_studies_by_user_requested studies = get_studies_by_user_requested('True') Parameters: user_requested ( bool ) \u2013 Whether the addition of this study to the Catalog was requested by a user interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object","title":"get_studies_by_user_requested"},{"location":"get_studies/#pandasgwas.get_studies.get_studies_by_variant_id","text":"get_studies_by_variant_id ( variant_id : str , interactive : bool = True ) -> Study Get GWAS Catalog Studies by Single Nucleotide Polymorphism identifier from pandasgwas.get_studies import get_studies_by_variant_id studies = get_studies_by_variant_id('rs7329174') Parameters: variant_id ( str ) \u2013 Single Nucleotide Polymorphism identifier, rsId in Single Nucleotide Polymorphism interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Study \u2013 A Study object","title":"get_studies_by_variant_id"},{"location":"get_traits/","text":"pandasgwas.get_traits get_traits get_traits ( study_id : str = None , association_id : str = None , efo_id : str = None , pubmed_id : str = None , efo_uri : str = None , efo_trait : str = None , set_operation : str = \"bind\" , interactive : bool = True , ) -> Trait Retrieves EFO Traits via the NHGRI-EBI GWAS Catalog REST API. The REST API is queried multiple times with the criteria passed as arguments. By default all EFO Traits that match the criteria supplied in the arguments are retrieved: this corresponds to the default set_operation set to 'bind', If you rather have only the EFO Traits that match simultaneously all criteria provided, then set set_operation to 'intersection'. from pandasgwas.get_traits import get_traits_by_efo_id traits = get_traits(efo_id='EFO_0001065') Parameters: study_id ( str , default: None ) \u2013 Study identifier, accessionId in Study association_id ( str , default: None ) \u2013 Association identifier, associationId in Association efo_id ( str , default: None ) \u2013 EFO Trait identifier, shortForm in EFO Trait pubmed_id ( str , default: None ) \u2013 PubMed identifier efo_uri ( str , default: None ) \u2013 EFO URI efo_trait ( str , default: None ) \u2013 Trait description set_operation ( str , default: 'bind' ) \u2013 \"bind\" or \"intersection\" interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Trait \u2013 A Trait object get_traits_all get_traits_all ( interactive : bool = True ) -> Trait Gets all EFO Trats from pandasgwas.get_traits import get_traits_all traits = get_traits_all() Parameters: interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Trait \u2013 A Trait object get_traits_by_association_id get_traits_by_association_id ( association_id : str , interactive : bool = True ) -> Trait Get GWAS Catalog EFO Traits by their Association identifier from pandasgwas.get_traits import get_traits_by_association_id traits = get_traits_by_association_id('16603') Parameters: association_id ( str ) \u2013 Association identifier, associationId in Association interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Trait \u2013 A Trait object get_traits_by_efo_id get_traits_by_efo_id ( efo_id : str , interactive : bool = True ) -> Trait Get GWAS Catalog EFO Traits by their EFO Trait identifier from pandasgwas.get_traits import get_traits_by_efo_id traits = get_traits_by_efo_id('EFO_0001065') Parameters: efo_id ( str ) \u2013 EFO Trait identifier, shortForm in EFO Trait interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Trait \u2013 A Trait object get_traits_by_efo_trait get_traits_by_efo_trait ( efo_trait : str , interactive : bool = True ) -> Trait Get GWAS Catalog EFO Traits that match trait description from pandasgwas.get_traits import get_traits_by_efo_trait traits = get_traits_by_efo_trait('MHPG measurement') Parameters: efo_trait ( str ) \u2013 Trait description interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Trait \u2013 A Trait object get_traits_by_efo_uri get_traits_by_efo_uri ( efo_uri : str , interactive : bool = True ) -> Trait Get GWAS Catalog EFO Traits by EFO URI from pandasgwas.get_traits import get_traits_by_efo_uri traits = get_traits_by_efo_uri('http://www.ebi.ac.uk/efo/EFO_0005133') Parameters: efo_uri ( str ) \u2013 EFO URI interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Trait \u2013 A Trait object get_traits_by_pubmed_id get_traits_by_pubmed_id ( pubmed_id : str , interactive : bool = True ) -> Trait Get GWAS Catalog EFO Traits by PubMed identifiers from pandasgwas.get_traits import get_traits_by_pubmed_id traits = get_traits_by_pubmed_id('21041247') Parameters: pubmed_id ( str ) \u2013 PubMed identifier interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Trait \u2013 A Trait object get_traits_by_study_id get_traits_by_study_id ( study_id : str , interactive : bool = True ) -> Trait from pandasgwas.get_traits import get_traits_by_study_id traits = get_traits_by_study_id('GCST000854') Parameters: study_id ( str ) \u2013 Study identifier, accessionId in Study interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Trait \u2013 A Trait object","title":"Get traits"},{"location":"get_traits/#pandasgwas.get_traits","text":"","title":"get_traits"},{"location":"get_traits/#pandasgwas.get_traits.get_traits","text":"get_traits ( study_id : str = None , association_id : str = None , efo_id : str = None , pubmed_id : str = None , efo_uri : str = None , efo_trait : str = None , set_operation : str = \"bind\" , interactive : bool = True , ) -> Trait Retrieves EFO Traits via the NHGRI-EBI GWAS Catalog REST API. The REST API is queried multiple times with the criteria passed as arguments. By default all EFO Traits that match the criteria supplied in the arguments are retrieved: this corresponds to the default set_operation set to 'bind', If you rather have only the EFO Traits that match simultaneously all criteria provided, then set set_operation to 'intersection'. from pandasgwas.get_traits import get_traits_by_efo_id traits = get_traits(efo_id='EFO_0001065') Parameters: study_id ( str , default: None ) \u2013 Study identifier, accessionId in Study association_id ( str , default: None ) \u2013 Association identifier, associationId in Association efo_id ( str , default: None ) \u2013 EFO Trait identifier, shortForm in EFO Trait pubmed_id ( str , default: None ) \u2013 PubMed identifier efo_uri ( str , default: None ) \u2013 EFO URI efo_trait ( str , default: None ) \u2013 Trait description set_operation ( str , default: 'bind' ) \u2013 \"bind\" or \"intersection\" interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Trait \u2013 A Trait object","title":"get_traits"},{"location":"get_traits/#pandasgwas.get_traits.get_traits_all","text":"get_traits_all ( interactive : bool = True ) -> Trait Gets all EFO Trats from pandasgwas.get_traits import get_traits_all traits = get_traits_all() Parameters: interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Trait \u2013 A Trait object","title":"get_traits_all"},{"location":"get_traits/#pandasgwas.get_traits.get_traits_by_association_id","text":"get_traits_by_association_id ( association_id : str , interactive : bool = True ) -> Trait Get GWAS Catalog EFO Traits by their Association identifier from pandasgwas.get_traits import get_traits_by_association_id traits = get_traits_by_association_id('16603') Parameters: association_id ( str ) \u2013 Association identifier, associationId in Association interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Trait \u2013 A Trait object","title":"get_traits_by_association_id"},{"location":"get_traits/#pandasgwas.get_traits.get_traits_by_efo_id","text":"get_traits_by_efo_id ( efo_id : str , interactive : bool = True ) -> Trait Get GWAS Catalog EFO Traits by their EFO Trait identifier from pandasgwas.get_traits import get_traits_by_efo_id traits = get_traits_by_efo_id('EFO_0001065') Parameters: efo_id ( str ) \u2013 EFO Trait identifier, shortForm in EFO Trait interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Trait \u2013 A Trait object","title":"get_traits_by_efo_id"},{"location":"get_traits/#pandasgwas.get_traits.get_traits_by_efo_trait","text":"get_traits_by_efo_trait ( efo_trait : str , interactive : bool = True ) -> Trait Get GWAS Catalog EFO Traits that match trait description from pandasgwas.get_traits import get_traits_by_efo_trait traits = get_traits_by_efo_trait('MHPG measurement') Parameters: efo_trait ( str ) \u2013 Trait description interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Trait \u2013 A Trait object","title":"get_traits_by_efo_trait"},{"location":"get_traits/#pandasgwas.get_traits.get_traits_by_efo_uri","text":"get_traits_by_efo_uri ( efo_uri : str , interactive : bool = True ) -> Trait Get GWAS Catalog EFO Traits by EFO URI from pandasgwas.get_traits import get_traits_by_efo_uri traits = get_traits_by_efo_uri('http://www.ebi.ac.uk/efo/EFO_0005133') Parameters: efo_uri ( str ) \u2013 EFO URI interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Trait \u2013 A Trait object","title":"get_traits_by_efo_uri"},{"location":"get_traits/#pandasgwas.get_traits.get_traits_by_pubmed_id","text":"get_traits_by_pubmed_id ( pubmed_id : str , interactive : bool = True ) -> Trait Get GWAS Catalog EFO Traits by PubMed identifiers from pandasgwas.get_traits import get_traits_by_pubmed_id traits = get_traits_by_pubmed_id('21041247') Parameters: pubmed_id ( str ) \u2013 PubMed identifier interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Trait \u2013 A Trait object","title":"get_traits_by_pubmed_id"},{"location":"get_traits/#pandasgwas.get_traits.get_traits_by_study_id","text":"get_traits_by_study_id ( study_id : str , interactive : bool = True ) -> Trait from pandasgwas.get_traits import get_traits_by_study_id traits = get_traits_by_study_id('GCST000854') Parameters: study_id ( str ) \u2013 Study identifier, accessionId in Study interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Trait \u2013 A Trait object","title":"get_traits_by_study_id"},{"location":"get_variants/","text":"pandasgwas.get_variants get_variants get_variants ( study_id : str = None , association_id : str = None , variant_id : str = None , efo_id : str = None , pubmed_id : str = None , genomic_range : List [ int ] = None , gene_name : str = None , efo_trait : str = None , reported_trait : str = None , set_operation : str = \"bind\" , interactive : bool = True , ) -> Variant Retrieves Single Nucleotide Polymorphisms via the NHGRI-EBI GWAS Catalog REST API. The REST API is queried multiple times with the criteria passed as arguments. By default all Single Nucleotide Polymorphisms that match the criteria supplied in the arguments are retrieved: this corresponds to the default set_operation set to 'bind', If you rather have only the Single Nucleotide Polymorphisms that match simultaneously all criteria provided, then set set_operation to 'intersection'. from pandasgwas.get_variants import get_variants_by_variant_id snps = get_variants(variant_id='rs7744020') Parameters: study_id ( str , default: None ) \u2013 association_id ( str , default: None ) \u2013 Association identifier, associationId in Association variant_id ( str , default: None ) \u2013 Single Nucleotide Polymorphism identifier, rsId in Single Nucleotide Polymorphism efo_id ( str , default: None ) \u2013 EFO Trait identifier, shortForm in EFO Trait pubmed_id ( str , default: None ) \u2013 PubMed identifier genomic_range ( List [ int ] , default: None ) \u2013 A List of three elements. These elements are: 'chromosome', 'start' and 'end' in function get_variants_by_genomic_range gene_name ( str , default: None ) \u2013 Gene names efo_trait ( str , default: None ) \u2013 Trait description reported_trait ( str , default: None ) \u2013 Trait are reported by the original authors of the study set_operation ( str , default: 'bind' ) \u2013 \"bind\" or \"intersection\" interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object get_variants_all get_variants_all ( interactive : bool = True ) -> Variant Get all Single Nucleotide Polymorphisms from pandasgwas.get_variants import get_variants_all snps = get_variants_all() Parameters: interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object get_variants_by_association_id get_variants_by_association_id ( association_id : str , interactive : bool = True ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms by by their Association identifier from pandasgwas.get_variants import get_variants_by_association_id snps = get_variants_by_association_id('16603') Parameters: association_id ( str ) \u2013 Association identifier, associationId in Association interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object get_variants_by_cytogenetic_band get_variants_by_cytogenetic_band ( cytogenetic_band : str , interactive : bool = True ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms by cytogenetic band. from pandasgwas.get_variants import get_variants_by_cytogenetic_band snps = get_variants_by_cytogenetic_band('1p36.32') Parameters: cytogenetic_band ( str ) \u2013 Cytogenetic bands of the form '1p36.11' interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object get_variants_by_efo_id get_variants_by_efo_id ( efo_id : str , interactive : bool = True ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms by their EFO Trait identifier from pandasgwas.get_variants import get_variants_by_efo_id snps = get_variants_by_efo_id('EFO_0001065') Parameters: efo_id ( str ) \u2013 EFO Trait identifier, shortForm in EFO Trait interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object get_variants_by_efo_trait get_variants_by_efo_trait ( efo_trait : str , interactive : bool = True ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms that match trait description from pandasgwas.get_variants import get_variants_by_efo_trait snps = get_variants_by_efo_trait('MHPG measurement') Parameters: efo_trait ( str ) \u2013 Trait description interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object get_variants_by_gene_name get_variants_by_gene_name ( gene_name : str , interactive : bool = True ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms gene name from pandasgwas.get_variants import get_variants_by_gene_name snps = get_variants_by_gene_name('KIAA0319') Parameters: gene_name ( str ) \u2013 Gene names interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object get_variants_by_genomic_range get_variants_by_genomic_range ( chromosome : str , start : int , end : int , interactive : bool = True , ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms by genomic range from pandasgwas.get_variants import get_variants_by_genomic_range snps = get_variants_by_genomic_range('1', 2300001, 5300000) Parameters: chromosome ( str ) \u2013 Human chromosome names: autosomal and sexual chromosomes only, i.e., 1--22, X and Y start ( int ) \u2013 Start position of range (starts at 1). end ( int ) \u2013 End position of range (inclusive). interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object get_variants_by_pubmed_id get_variants_by_pubmed_id ( pubmed_id : str , interactive : bool = True ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms by PubMed identifiers from pandasgwas.get_variants import get_variants_by_pubmed_id snps = get_variants_by_pubmed_id('21041247') Parameters: pubmed_id ( str ) \u2013 PubMed identifier interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object get_variants_by_reported_trait get_variants_by_reported_trait ( reported_trait : str , interactive : bool = True ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms that match the reported traits, as reported by the original authors of the study. from pandasgwas.get_variants import get_variants_by_reported_trait snps = get_variants_by_reported_trait(\"Dupuytren's disease\") Parameters: reported_trait ( str ) \u2013 Trait are reported by the original authors of the study interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object get_variants_by_study_id get_variants_by_study_id ( study_id : str , interactive : bool = True ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms by Study identifier from pandasgwas.get_variants import get_variants_by_study_id snps = get_variants_by_study_id('GCST000854') Parameters: study_id ( str ) \u2013 Study identifier, accessionId in Study interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object get_variants_by_variant_id get_variants_by_variant_id ( variant_id : str , interactive : bool = True ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms by Single Nucleotide Polymorphism identifier from pandasgwas.get_variants import get_variants_by_variant_id snps = get_variants_by_variant_id('rs7744020') Parameters: variant_id ( str ) \u2013 Single Nucleotide Polymorphism identifier, rsId in Single Nucleotide Polymorphism interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object","title":"Get variants"},{"location":"get_variants/#pandasgwas.get_variants","text":"","title":"get_variants"},{"location":"get_variants/#pandasgwas.get_variants.get_variants","text":"get_variants ( study_id : str = None , association_id : str = None , variant_id : str = None , efo_id : str = None , pubmed_id : str = None , genomic_range : List [ int ] = None , gene_name : str = None , efo_trait : str = None , reported_trait : str = None , set_operation : str = \"bind\" , interactive : bool = True , ) -> Variant Retrieves Single Nucleotide Polymorphisms via the NHGRI-EBI GWAS Catalog REST API. The REST API is queried multiple times with the criteria passed as arguments. By default all Single Nucleotide Polymorphisms that match the criteria supplied in the arguments are retrieved: this corresponds to the default set_operation set to 'bind', If you rather have only the Single Nucleotide Polymorphisms that match simultaneously all criteria provided, then set set_operation to 'intersection'. from pandasgwas.get_variants import get_variants_by_variant_id snps = get_variants(variant_id='rs7744020') Parameters: study_id ( str , default: None ) \u2013 association_id ( str , default: None ) \u2013 Association identifier, associationId in Association variant_id ( str , default: None ) \u2013 Single Nucleotide Polymorphism identifier, rsId in Single Nucleotide Polymorphism efo_id ( str , default: None ) \u2013 EFO Trait identifier, shortForm in EFO Trait pubmed_id ( str , default: None ) \u2013 PubMed identifier genomic_range ( List [ int ] , default: None ) \u2013 A List of three elements. These elements are: 'chromosome', 'start' and 'end' in function get_variants_by_genomic_range gene_name ( str , default: None ) \u2013 Gene names efo_trait ( str , default: None ) \u2013 Trait description reported_trait ( str , default: None ) \u2013 Trait are reported by the original authors of the study set_operation ( str , default: 'bind' ) \u2013 \"bind\" or \"intersection\" interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object","title":"get_variants"},{"location":"get_variants/#pandasgwas.get_variants.get_variants_all","text":"get_variants_all ( interactive : bool = True ) -> Variant Get all Single Nucleotide Polymorphisms from pandasgwas.get_variants import get_variants_all snps = get_variants_all() Parameters: interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object","title":"get_variants_all"},{"location":"get_variants/#pandasgwas.get_variants.get_variants_by_association_id","text":"get_variants_by_association_id ( association_id : str , interactive : bool = True ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms by by their Association identifier from pandasgwas.get_variants import get_variants_by_association_id snps = get_variants_by_association_id('16603') Parameters: association_id ( str ) \u2013 Association identifier, associationId in Association interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object","title":"get_variants_by_association_id"},{"location":"get_variants/#pandasgwas.get_variants.get_variants_by_cytogenetic_band","text":"get_variants_by_cytogenetic_band ( cytogenetic_band : str , interactive : bool = True ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms by cytogenetic band. from pandasgwas.get_variants import get_variants_by_cytogenetic_band snps = get_variants_by_cytogenetic_band('1p36.32') Parameters: cytogenetic_band ( str ) \u2013 Cytogenetic bands of the form '1p36.11' interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object","title":"get_variants_by_cytogenetic_band"},{"location":"get_variants/#pandasgwas.get_variants.get_variants_by_efo_id","text":"get_variants_by_efo_id ( efo_id : str , interactive : bool = True ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms by their EFO Trait identifier from pandasgwas.get_variants import get_variants_by_efo_id snps = get_variants_by_efo_id('EFO_0001065') Parameters: efo_id ( str ) \u2013 EFO Trait identifier, shortForm in EFO Trait interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object","title":"get_variants_by_efo_id"},{"location":"get_variants/#pandasgwas.get_variants.get_variants_by_efo_trait","text":"get_variants_by_efo_trait ( efo_trait : str , interactive : bool = True ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms that match trait description from pandasgwas.get_variants import get_variants_by_efo_trait snps = get_variants_by_efo_trait('MHPG measurement') Parameters: efo_trait ( str ) \u2013 Trait description interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object","title":"get_variants_by_efo_trait"},{"location":"get_variants/#pandasgwas.get_variants.get_variants_by_gene_name","text":"get_variants_by_gene_name ( gene_name : str , interactive : bool = True ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms gene name from pandasgwas.get_variants import get_variants_by_gene_name snps = get_variants_by_gene_name('KIAA0319') Parameters: gene_name ( str ) \u2013 Gene names interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object","title":"get_variants_by_gene_name"},{"location":"get_variants/#pandasgwas.get_variants.get_variants_by_genomic_range","text":"get_variants_by_genomic_range ( chromosome : str , start : int , end : int , interactive : bool = True , ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms by genomic range from pandasgwas.get_variants import get_variants_by_genomic_range snps = get_variants_by_genomic_range('1', 2300001, 5300000) Parameters: chromosome ( str ) \u2013 Human chromosome names: autosomal and sexual chromosomes only, i.e., 1--22, X and Y start ( int ) \u2013 Start position of range (starts at 1). end ( int ) \u2013 End position of range (inclusive). interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object","title":"get_variants_by_genomic_range"},{"location":"get_variants/#pandasgwas.get_variants.get_variants_by_pubmed_id","text":"get_variants_by_pubmed_id ( pubmed_id : str , interactive : bool = True ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms by PubMed identifiers from pandasgwas.get_variants import get_variants_by_pubmed_id snps = get_variants_by_pubmed_id('21041247') Parameters: pubmed_id ( str ) \u2013 PubMed identifier interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object","title":"get_variants_by_pubmed_id"},{"location":"get_variants/#pandasgwas.get_variants.get_variants_by_reported_trait","text":"get_variants_by_reported_trait ( reported_trait : str , interactive : bool = True ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms that match the reported traits, as reported by the original authors of the study. from pandasgwas.get_variants import get_variants_by_reported_trait snps = get_variants_by_reported_trait(\"Dupuytren's disease\") Parameters: reported_trait ( str ) \u2013 Trait are reported by the original authors of the study interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object","title":"get_variants_by_reported_trait"},{"location":"get_variants/#pandasgwas.get_variants.get_variants_by_study_id","text":"get_variants_by_study_id ( study_id : str , interactive : bool = True ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms by Study identifier from pandasgwas.get_variants import get_variants_by_study_id snps = get_variants_by_study_id('GCST000854') Parameters: study_id ( str ) \u2013 Study identifier, accessionId in Study interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object","title":"get_variants_by_study_id"},{"location":"get_variants/#pandasgwas.get_variants.get_variants_by_variant_id","text":"get_variants_by_variant_id ( variant_id : str , interactive : bool = True ) -> Variant Get GWAS Catalog Single Nucleotide Polymorphisms by Single Nucleotide Polymorphism identifier from pandasgwas.get_variants import get_variants_by_variant_id snps = get_variants_by_variant_id('rs7744020') Parameters: variant_id ( str ) \u2013 Single Nucleotide Polymorphism identifier, rsId in Single Nucleotide Polymorphism interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: Variant \u2013 A Variant object","title":"get_variants_by_variant_id"},{"location":"set_operation/","text":"pandasgwas.set_operation Set operations for objects of same class # set operation in EFO Trait from pandasgwas.get_traits import get_traits from pandasgwas.set_operation import * traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 + traits2 traits3 = bind(traits1, traits2) traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 & traits2 traits3 = intersect(traits1, traits2) traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 - traits2 traits3 = set_diff(traits1, traits2) traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 ^ traits2 traits3 = set_xor(traits1, traits2) traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 | traits2 traits3 = union(traits1, traits2) traits1 = get_traits(study_id='GCST000854') traits2 = get_traits(study_id='GCST000854') #Equivalent to traits1 == traits2 set_equal(traits1, traits2) bind bind ( a : Union [ Association , Variant , Study , Trait ], b : Union [ Association , Variant , Study , Trait ], ) -> Union [ Association , Variant , Study , Trait ] Binds together GWAS Catalog objects of the same class. Note that bind() preserves duplicates whereas union() does not. Parameters: a ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the pandasGWAS custom class. b ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the same type as a. Returns: Union [ Association , Variant , Study , Trait ] \u2013 An object of the same type as a. intersect intersect ( a : Union [ Association , Variant , Study , Trait ], b : Union [ Association , Variant , Study , Trait ], ) -> Union [ Association , Variant , Study , Trait ] Returns the data common to both A and B, with no repetitions Parameters: a ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the pandasGWAS custom class. b ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the same type as a. Returns: Union [ Association , Variant , Study , Trait ] \u2013 An object of the same type as a. set_diff set_diff ( a : Union [ Association , Variant , Study , Trait ], b : Union [ Association , Variant , Study , Trait ], ) -> Union [ Association , Variant , Study , Trait ] Returns the data in A that is not in B, with no repetitions Parameters: a ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the pandasGWAS custom class. b ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the same type as a. Returns: Union [ Association , Variant , Study , Trait ] \u2013 An object of the same type as a. set_equal set_equal ( a : Union [ Association , Variant , Study , Trait ], b : Union [ Association , Variant , Study , Trait ], ) -> bool Check if the raw data of a and b are equal Parameters: a ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the pandasGWAS custom class. b ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the same type as a. Returns: bool \u2013 True or False. set_xor set_xor ( a : Union [ Association , Variant , Study , Trait ], b : Union [ Association , Variant , Study , Trait ], ) -> Union [ Association , Variant , Study , Trait ] Returns the data of A and B that are not in their intersection (the symmetric difference), with no repetitions Parameters: a ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the pandasGWAS custom class. b ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the same type as a. Returns: Union [ Association , Variant , Study , Trait ] \u2013 An object of the same type as a. union union ( a : Union [ Association , Variant , Study , Trait ], b : Union [ Association , Variant , Study , Trait ], ) -> Union [ Association , Variant , Study , Trait ] Returns the combined data from A and B with no repetitions Parameters: a ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the pandasGWAS custom class. b ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the same type as a. Returns: Union [ Association , Variant , Study , Trait ] \u2013 An object of the same type as a.","title":"Set operation"},{"location":"set_operation/#pandasgwas.set_operation","text":"Set operations for objects of same class # set operation in EFO Trait from pandasgwas.get_traits import get_traits from pandasgwas.set_operation import * traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 + traits2 traits3 = bind(traits1, traits2) traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 & traits2 traits3 = intersect(traits1, traits2) traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 - traits2 traits3 = set_diff(traits1, traits2) traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 ^ traits2 traits3 = set_xor(traits1, traits2) traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 | traits2 traits3 = union(traits1, traits2) traits1 = get_traits(study_id='GCST000854') traits2 = get_traits(study_id='GCST000854') #Equivalent to traits1 == traits2 set_equal(traits1, traits2)","title":"set_operation"},{"location":"set_operation/#pandasgwas.set_operation.bind","text":"bind ( a : Union [ Association , Variant , Study , Trait ], b : Union [ Association , Variant , Study , Trait ], ) -> Union [ Association , Variant , Study , Trait ] Binds together GWAS Catalog objects of the same class. Note that bind() preserves duplicates whereas union() does not. Parameters: a ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the pandasGWAS custom class. b ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the same type as a. Returns: Union [ Association , Variant , Study , Trait ] \u2013 An object of the same type as a.","title":"bind"},{"location":"set_operation/#pandasgwas.set_operation.intersect","text":"intersect ( a : Union [ Association , Variant , Study , Trait ], b : Union [ Association , Variant , Study , Trait ], ) -> Union [ Association , Variant , Study , Trait ] Returns the data common to both A and B, with no repetitions Parameters: a ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the pandasGWAS custom class. b ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the same type as a. Returns: Union [ Association , Variant , Study , Trait ] \u2013 An object of the same type as a.","title":"intersect"},{"location":"set_operation/#pandasgwas.set_operation.set_diff","text":"set_diff ( a : Union [ Association , Variant , Study , Trait ], b : Union [ Association , Variant , Study , Trait ], ) -> Union [ Association , Variant , Study , Trait ] Returns the data in A that is not in B, with no repetitions Parameters: a ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the pandasGWAS custom class. b ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the same type as a. Returns: Union [ Association , Variant , Study , Trait ] \u2013 An object of the same type as a.","title":"set_diff"},{"location":"set_operation/#pandasgwas.set_operation.set_equal","text":"set_equal ( a : Union [ Association , Variant , Study , Trait ], b : Union [ Association , Variant , Study , Trait ], ) -> bool Check if the raw data of a and b are equal Parameters: a ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the pandasGWAS custom class. b ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the same type as a. Returns: bool \u2013 True or False.","title":"set_equal"},{"location":"set_operation/#pandasgwas.set_operation.set_xor","text":"set_xor ( a : Union [ Association , Variant , Study , Trait ], b : Union [ Association , Variant , Study , Trait ], ) -> Union [ Association , Variant , Study , Trait ] Returns the data of A and B that are not in their intersection (the symmetric difference), with no repetitions Parameters: a ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the pandasGWAS custom class. b ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the same type as a. Returns: Union [ Association , Variant , Study , Trait ] \u2013 An object of the same type as a.","title":"set_xor"},{"location":"set_operation/#pandasgwas.set_operation.union","text":"union ( a : Union [ Association , Variant , Study , Trait ], b : Union [ Association , Variant , Study , Trait ], ) -> Union [ Association , Variant , Study , Trait ] Returns the combined data from A and B with no repetitions Parameters: a ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the pandasGWAS custom class. b ( Union [ Association , Variant , Study , Trait ] ) \u2013 An object of the same type as a. Returns: Union [ Association , Variant , Study , Trait ] \u2013 An object of the same type as a.","title":"union"},{"location":"summary_statistics/","text":"pandasgwas.summary_statistics Functions for easy retrieval of summary statistics data based on FTP data. from pandasgwas import summary_statistics #Search the index based on PubMed_id, study_accession_id, and EFO_trait_id. The indexed results will be returned as a DataFrame. search_DF = summary_statistics.search(PubMed_id='27918534', study_accession_id='GCST003966') #Based on the index results, view the data directory on the browser. summary_statistics.browser(search_DF) #Based on index results, download summary statistics data in $Home/pandasgwas_home. summary_statistics.download(search_DF) #Based on the index results, load the data from $Home/pandasgwas_home and convert it into a DataFrame. df = summary_statistics.parse(search_DF) browser browser ( search_DF : DataFrame , interactive : bool = True ) -> None See where the data is stored in the browser. Parameters: search_DF ( DataFrame ) \u2013 A DataFrame that stores the FTP storage location. Obtained from calling the search function. interactive ( bool , default: True ) \u2013 Whether to make interactive prompts. Returns: download download ( search_DF : DataFrame ) -> None Download FTP data to directory $HOME/pandasgwas_home. Parameters: search_DF ( DataFrame ) \u2013 A DataFrame that stores the FTP storage location. Obtained from calling the search function. Returns: parse parse ( search_DF : DataFrame , interactive : bool = True ) -> DataFrame Resolves the specified data from the directory $HOME/pandas_home to a DataFrame. Parameters: search_DF ( DataFrame ) \u2013 A DataFrame that stores the FTP storage location. Obtained from calling the search function. interactive ( bool , default: True ) \u2013 Whether to make interactive prompts. Returns: DataFrame \u2013 A DataFrame that records summary statistics. search search ( PubMed_id : str = None , study_accession_id : str = None , EFO_trait_id : str = None , online_index : bool = False , ) -> DataFrame Search for where data is stored based on indexing and query criteria. Parameters: PubMed_id ( str , default: None ) \u2013 ID of PubMed. study_accession_id ( str , default: None ) \u2013 ID of study accession. EFO_trait_id ( str , default: None ) \u2013 ID of EFO trait. online_index ( bool , default: False ) \u2013 Whether to use an online index. Returns: DataFrame \u2013 A DataFrame that records where the data is stored.","title":"Summary statistics"},{"location":"summary_statistics/#pandasgwas.summary_statistics","text":"Functions for easy retrieval of summary statistics data based on FTP data. from pandasgwas import summary_statistics #Search the index based on PubMed_id, study_accession_id, and EFO_trait_id. The indexed results will be returned as a DataFrame. search_DF = summary_statistics.search(PubMed_id='27918534', study_accession_id='GCST003966') #Based on the index results, view the data directory on the browser. summary_statistics.browser(search_DF) #Based on index results, download summary statistics data in $Home/pandasgwas_home. summary_statistics.download(search_DF) #Based on the index results, load the data from $Home/pandasgwas_home and convert it into a DataFrame. df = summary_statistics.parse(search_DF)","title":"summary_statistics"},{"location":"summary_statistics/#pandasgwas.summary_statistics.browser","text":"browser ( search_DF : DataFrame , interactive : bool = True ) -> None See where the data is stored in the browser. Parameters: search_DF ( DataFrame ) \u2013 A DataFrame that stores the FTP storage location. Obtained from calling the search function. interactive ( bool , default: True ) \u2013 Whether to make interactive prompts. Returns:","title":"browser"},{"location":"summary_statistics/#pandasgwas.summary_statistics.download","text":"download ( search_DF : DataFrame ) -> None Download FTP data to directory $HOME/pandasgwas_home. Parameters: search_DF ( DataFrame ) \u2013 A DataFrame that stores the FTP storage location. Obtained from calling the search function. Returns:","title":"download"},{"location":"summary_statistics/#pandasgwas.summary_statistics.parse","text":"parse ( search_DF : DataFrame , interactive : bool = True ) -> DataFrame Resolves the specified data from the directory $HOME/pandas_home to a DataFrame. Parameters: search_DF ( DataFrame ) \u2013 A DataFrame that stores the FTP storage location. Obtained from calling the search function. interactive ( bool , default: True ) \u2013 Whether to make interactive prompts. Returns: DataFrame \u2013 A DataFrame that records summary statistics.","title":"parse"},{"location":"summary_statistics/#pandasgwas.summary_statistics.search","text":"search ( PubMed_id : str = None , study_accession_id : str = None , EFO_trait_id : str = None , online_index : bool = False , ) -> DataFrame Search for where data is stored based on indexing and query criteria. Parameters: PubMed_id ( str , default: None ) \u2013 ID of PubMed. study_accession_id ( str , default: None ) \u2013 ID of study accession. EFO_trait_id ( str , default: None ) \u2013 ID of EFO trait. online_index ( bool , default: False ) \u2013 Whether to use an online index. Returns: DataFrame \u2013 A DataFrame that records where the data is stored.","title":"search"},{"location":"utility/","text":"pandasgwas.utility clear_cache clear_cache () -> None Clear cache of API requests. Returns: None \u2013 None get_child_efo get_child_efo ( efo_id : str , interactive : bool = True ) -> List [ str ] Get all child terms of this trait in the EFO hierarchy from pandasgwas import get_child_efo child_list1=get_child_efo('EFO_0004884')#['EFO_0009393'] child_list2=get_child_efo('EFO_0005299')#[] child_list3=get_child_efo('EFO_0009640')#['EFO_0600083', 'EFO_0005606', 'EFO_0008346', 'EFO_0006953'] Parameters: efo_id ( str ) \u2013 EFO identifiers interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: List [ str ] \u2013 EFO identifiers is_API_available is_API_available () -> bool Test if the API is available. If the return value is not True, it means that the API is not available. from pandasgwas import is_API_available is_available = is_API_available() Returns: bool \u2013 True or False","title":"Utility"},{"location":"utility/#pandasgwas.utility","text":"","title":"utility"},{"location":"utility/#pandasgwas.utility.clear_cache","text":"clear_cache () -> None Clear cache of API requests. Returns: None \u2013 None","title":"clear_cache"},{"location":"utility/#pandasgwas.utility.get_child_efo","text":"get_child_efo ( efo_id : str , interactive : bool = True ) -> List [ str ] Get all child terms of this trait in the EFO hierarchy from pandasgwas import get_child_efo child_list1=get_child_efo('EFO_0004884')#['EFO_0009393'] child_list2=get_child_efo('EFO_0005299')#[] child_list3=get_child_efo('EFO_0009640')#['EFO_0600083', 'EFO_0005606', 'EFO_0008346', 'EFO_0006953'] Parameters: efo_id ( str ) \u2013 EFO identifiers interactive ( bool , default: True ) \u2013 Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. Returns: List [ str ] \u2013 EFO identifiers","title":"get_child_efo"},{"location":"utility/#pandasgwas.utility.is_API_available","text":"is_API_available () -> bool Test if the API is available. If the return value is not True, it means that the API is not available. from pandasgwas import is_API_available is_available = is_API_available() Returns: bool \u2013 True or False","title":"is_API_available"}]}