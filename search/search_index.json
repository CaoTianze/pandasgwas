{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pandasGWAS Documentation pandasGWAS: a Python package for easy retrieval of GWAS catalog data Modules Association - Python class to represent a set of GWAS Catalog Associations Browser - A set of helper functions for accessing web links get_associations - Get GWAS Catalog Associations functions get_SNPs - Get GWAS Catalog Single Nucleotide Polymorphisms functions get_studies - Get GWAS Catalog Studies functions get_traits - Get GWAS Catalog EFO Traits functions set_operation - Set operations for objects of same class SingleNucleotidePolymorphism - Python class to represent a set of Single Nucleotide Polymorphisms Study - Python class to represent a set of Studies Trait - Python class to represent a set of EFO Traits","title":"pandasGWAS Documentation"},{"location":"#pandasgwas-documentation","text":"pandasGWAS: a Python package for easy retrieval of GWAS catalog data","title":"pandasGWAS Documentation"},{"location":"#modules","text":"Association - Python class to represent a set of GWAS Catalog Associations Browser - A set of helper functions for accessing web links get_associations - Get GWAS Catalog Associations functions get_SNPs - Get GWAS Catalog Single Nucleotide Polymorphisms functions get_studies - Get GWAS Catalog Studies functions get_traits - Get GWAS Catalog EFO Traits functions set_operation - Set operations for objects of same class SingleNucleotidePolymorphism - Python class to represent a set of Single Nucleotide Polymorphisms Study - Python class to represent a set of Studies Trait - Python class to represent a set of EFO Traits","title":"Modules"},{"location":"Association/","text":"Association class Association.Association() Python class to represent a set of GWAS Catalog Association. For more information, see \" GWAS CATALOG API Guide \" # get Association by study_id from pandasgwas.get_associations import get_associations associations = get_associations(study_id='GCST000854') property associations type: pandas.DataFrame A DataFrame to represent all queried Associations from GWAS Catalog REST API property loci type: pandas.DataFrame A DataFrame to represent column loci from associations property strongest_risk_alleles type: pandas.DataFrame A DataFrame to represent column strongest_risk_alleles from loci property author_reported_genes type: pandas.DataFrame A DataFrame to represent column author_reported_genes from loci property entrez_gene_ids type: pandas.DataFrame A DataFrame to represent column entrez_gene_ids from author_reported_genes property ensembl_gene_ids type: pandas.DataFrame A DataFrame to represent column entrez_gene_ids from author_reported_genes","title":"Association"},{"location":"Association/#association","text":"","title":"Association"},{"location":"Association/#class-associationassociation","text":"Python class to represent a set of GWAS Catalog Association. For more information, see \" GWAS CATALOG API Guide \" # get Association by study_id from pandasgwas.get_associations import get_associations associations = get_associations(study_id='GCST000854')","title":"class Association.Association()"},{"location":"Association/#property-associations","text":"type: pandas.DataFrame A DataFrame to represent all queried Associations from GWAS Catalog REST API","title":"property associations"},{"location":"Association/#property-loci","text":"type: pandas.DataFrame A DataFrame to represent column loci from associations","title":"property loci"},{"location":"Association/#property-strongest_risk_alleles","text":"type: pandas.DataFrame A DataFrame to represent column strongest_risk_alleles from loci","title":"property strongest_risk_alleles"},{"location":"Association/#property-author_reported_genes","text":"type: pandas.DataFrame A DataFrame to represent column author_reported_genes from loci","title":"property author_reported_genes"},{"location":"Association/#property-entrez_gene_ids","text":"type: pandas.DataFrame A DataFrame to represent column entrez_gene_ids from author_reported_genes","title":"property entrez_gene_ids"},{"location":"Association/#property-ensembl_gene_ids","text":"type: pandas.DataFrame A DataFrame to represent column entrez_gene_ids from author_reported_genes","title":"property ensembl_gene_ids"},{"location":"Browser/","text":"Browser A set of helper functions for accessing web links function open_in_pubmed(pubmed_id: str) -> bool This function launches the web browser and opens a tab for PubMed citation from pandasgwas.Browser import * open_in_pubmed('26301688') param pubmed_id A PubMed identifier function open_in_dbsnp(variant_id: str) -> bool This function launches the web browser at dbSNP and opens a tab for SNP identifier from pandasgwas.Browser import * open_in_dbsnp('rs56261590') param variant_id A variant(Single Nucleotide Polymorphism) identifier function open_in_gtex(variant_id: str) -> bool This function launches the web browser at the GTEx Portal and opens a tab for SNP identifier. from pandasgwas.Browser import * open_in_gtex('rs56261590') param variant_id A variant(Single Nucleotide Polymorphism) identifier function open_study_in_gwas_catalog(study_id: str) -> bool Browse GWAS Catalog entitie Study from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_study_in_gwas_catalog('GCST000016') param study_id A Study identifier function open_variant_in_gwas_catalog(variant_id: str) -> bool Browse GWAS Catalog entitie Single Nucleotide Polymorphism from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_variant_in_gwas_catalog('rs146992477') param variant_id A variant(Single Nucleotide Polymorphism) identifier function open_trait_in_gwas_catalog(efo_id: str) -> bool Browse GWAS Catalog entitie Trait from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_trait_in_gwas_catalog('EFO_0004884') param efo_id An EFO Trait identifier function open_gene_in_gwas_catalog(gene_name: str) -> bool Browse GWAS Catalog entitie Gene from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_gene_in_gwas_catalog('DPP6') param gene_name Gene name function open_region_in_gwas_catalog(region_name_or_location: str) -> bool Browse GWAS Catalog entitie Region from the GWAS Web Graphical User Interface from pandasgwas.Browser import * #region_name open_region_in_gwas_catalog('2q37.1') #location open_region_in_gwas_catalog('chr2:230100001-234700000') param region_name_or_location Region name or chromosome and base pair location on the reference genome function open_publication_in_gwas_catalog(pubmed_id: str) -> bool Browse GWAS Catalog entitie Publication from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_publication_in_gwas_catalog('25533513') param pubmed_id A PubMed identifier","title":"Browser"},{"location":"Browser/#browser","text":"A set of helper functions for accessing web links","title":"Browser"},{"location":"Browser/#function-open_in_pubmedpubmed_id-str-bool","text":"This function launches the web browser and opens a tab for PubMed citation from pandasgwas.Browser import * open_in_pubmed('26301688')","title":"function open_in_pubmed(pubmed_id: str) -&gt; bool"},{"location":"Browser/#param-pubmed_id","text":"A PubMed identifier","title":"param pubmed_id"},{"location":"Browser/#function-open_in_dbsnpvariant_id-str-bool","text":"This function launches the web browser at dbSNP and opens a tab for SNP identifier from pandasgwas.Browser import * open_in_dbsnp('rs56261590')","title":"function open_in_dbsnp(variant_id: str) -&gt; bool"},{"location":"Browser/#param-variant_id","text":"A variant(Single Nucleotide Polymorphism) identifier","title":"param variant_id"},{"location":"Browser/#function-open_in_gtexvariant_id-str-bool","text":"This function launches the web browser at the GTEx Portal and opens a tab for SNP identifier. from pandasgwas.Browser import * open_in_gtex('rs56261590')","title":"function open_in_gtex(variant_id: str) -&gt; bool"},{"location":"Browser/#param-variant_id_1","text":"A variant(Single Nucleotide Polymorphism) identifier","title":"param variant_id"},{"location":"Browser/#function-open_study_in_gwas_catalogstudy_id-str-bool","text":"Browse GWAS Catalog entitie Study from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_study_in_gwas_catalog('GCST000016')","title":"function open_study_in_gwas_catalog(study_id: str) -&gt; bool"},{"location":"Browser/#param-study_id","text":"A Study identifier","title":"param study_id"},{"location":"Browser/#function-open_variant_in_gwas_catalogvariant_id-str-bool","text":"Browse GWAS Catalog entitie Single Nucleotide Polymorphism from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_variant_in_gwas_catalog('rs146992477')","title":"function open_variant_in_gwas_catalog(variant_id: str) -&gt; bool"},{"location":"Browser/#param-variant_id_2","text":"A variant(Single Nucleotide Polymorphism) identifier","title":"param variant_id"},{"location":"Browser/#function-open_trait_in_gwas_catalogefo_id-str-bool","text":"Browse GWAS Catalog entitie Trait from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_trait_in_gwas_catalog('EFO_0004884')","title":"function open_trait_in_gwas_catalog(efo_id: str) -&gt; bool"},{"location":"Browser/#param-efo_id","text":"An EFO Trait identifier","title":"param efo_id"},{"location":"Browser/#function-open_gene_in_gwas_cataloggene_name-str-bool","text":"Browse GWAS Catalog entitie Gene from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_gene_in_gwas_catalog('DPP6')","title":"function open_gene_in_gwas_catalog(gene_name: str) -&gt; bool"},{"location":"Browser/#param-gene_name","text":"Gene name","title":"param gene_name"},{"location":"Browser/#function-open_region_in_gwas_catalogregion_name_or_location-str-bool","text":"Browse GWAS Catalog entitie Region from the GWAS Web Graphical User Interface from pandasgwas.Browser import * #region_name open_region_in_gwas_catalog('2q37.1') #location open_region_in_gwas_catalog('chr2:230100001-234700000')","title":"function open_region_in_gwas_catalog(region_name_or_location: str) -&gt; bool"},{"location":"Browser/#param-region_name_or_location","text":"Region name or chromosome and base pair location on the reference genome","title":"param region_name_or_location"},{"location":"Browser/#function-open_publication_in_gwas_catalogpubmed_id-str-bool","text":"Browse GWAS Catalog entitie Publication from the GWAS Web Graphical User Interface from pandasgwas.Browser import * open_publication_in_gwas_catalog('25533513')","title":"function open_publication_in_gwas_catalog(pubmed_id: str) -&gt; bool"},{"location":"Browser/#param-pubmed_id_1","text":"A PubMed identifier","title":"param pubmed_id"},{"location":"SingleNucleotidePolymorphism/","text":"SingleNucleotidePolymorphism class SingleNucleotidePolymorphism.SingleNucleotidePolymorphism() Python class to represent a set of GWAS Catalog Single Nucleotide Polymorphism. For more information, see \" GWAS CATALOG API Guide \" # get Single Nucleotide Polymorphism by study_id from pandasgwas.get_SNPs import get_variants snps = get_variants(study_id='GCST000854') property single_nucleotide_polymorphisms type: pandas.DataFrame A DataFrame to represent all queried Single Nucleotide Polymorphisms from GWAS Catalog REST API property locations type: pandas.DataFrame A DataFrame to represent column locations from single_nucleotide_polymorphisms property genomic_contexts type: pandas.DataFrame A DataFrame to represent column genomicContexts from single_nucleotide_polymorphisms property ensembl_gene_ids type: pandas.DataFrame A DataFrame to represent column gene.ensemblGeneIds from genomic_contexts property entrez_gene_ids type: pandas.DataFrame A DataFrame to represent column gene.entrezGeneIds from genomic_contexts","title":"SingleNucleotidePolymorphism"},{"location":"SingleNucleotidePolymorphism/#singlenucleotidepolymorphism","text":"","title":"SingleNucleotidePolymorphism"},{"location":"SingleNucleotidePolymorphism/#class-singlenucleotidepolymorphismsinglenucleotidepolymorphism","text":"Python class to represent a set of GWAS Catalog Single Nucleotide Polymorphism. For more information, see \" GWAS CATALOG API Guide \" # get Single Nucleotide Polymorphism by study_id from pandasgwas.get_SNPs import get_variants snps = get_variants(study_id='GCST000854')","title":"class SingleNucleotidePolymorphism.SingleNucleotidePolymorphism()"},{"location":"SingleNucleotidePolymorphism/#property-single_nucleotide_polymorphisms","text":"type: pandas.DataFrame A DataFrame to represent all queried Single Nucleotide Polymorphisms from GWAS Catalog REST API","title":"property single_nucleotide_polymorphisms"},{"location":"SingleNucleotidePolymorphism/#property-locations","text":"type: pandas.DataFrame A DataFrame to represent column locations from single_nucleotide_polymorphisms","title":"property locations"},{"location":"SingleNucleotidePolymorphism/#property-genomic_contexts","text":"type: pandas.DataFrame A DataFrame to represent column genomicContexts from single_nucleotide_polymorphisms","title":"property genomic_contexts"},{"location":"SingleNucleotidePolymorphism/#property-ensembl_gene_ids","text":"type: pandas.DataFrame A DataFrame to represent column gene.ensemblGeneIds from genomic_contexts","title":"property ensembl_gene_ids"},{"location":"SingleNucleotidePolymorphism/#property-entrez_gene_ids","text":"type: pandas.DataFrame A DataFrame to represent column gene.entrezGeneIds from genomic_contexts","title":"property entrez_gene_ids"},{"location":"Study/","text":"Study class Study.Study() Python class to represent a set of GWAS Catalog Study. For more information, see \" GWAS CATALOG API Guide \" # get Study by study_id from pandasgwas.get_studies import get_studies studies = get_studies(study_id='GCST000854') property studies type: pandas.DataFrame A DataFrame to represent all queried Studies from GWAS Catalog REST API property platforms type: pandas.DataFrame A DataFrame to represent column platforms from studies property ancestries type: pandas.DataFrame A DataFrame to represent column ancestries from studies property genotypingTechnologies type: pandas.DataFrame A DataFrame to represent column genotypingTechnologies from studies property ancestralGroups type: pandas.DataFrame A DataFrame to represent column ancestralGroups from ancestries property countriesOfOrigin type: pandas.DataFrame A DataFrame to represent column countriesOfOrigin from ancestries property countriesOfRecruitment type: pandas.DataFrame A DataFrame to represent column countriesOfOrigin from ancestries","title":"Study"},{"location":"Study/#study","text":"","title":"Study"},{"location":"Study/#class-studystudy","text":"Python class to represent a set of GWAS Catalog Study. For more information, see \" GWAS CATALOG API Guide \" # get Study by study_id from pandasgwas.get_studies import get_studies studies = get_studies(study_id='GCST000854')","title":"class Study.Study()"},{"location":"Study/#property-studies","text":"type: pandas.DataFrame A DataFrame to represent all queried Studies from GWAS Catalog REST API","title":"property studies"},{"location":"Study/#property-platforms","text":"type: pandas.DataFrame A DataFrame to represent column platforms from studies","title":"property platforms"},{"location":"Study/#property-ancestries","text":"type: pandas.DataFrame A DataFrame to represent column ancestries from studies","title":"property ancestries"},{"location":"Study/#property-genotypingtechnologies","text":"type: pandas.DataFrame A DataFrame to represent column genotypingTechnologies from studies","title":"property genotypingTechnologies"},{"location":"Study/#property-ancestralgroups","text":"type: pandas.DataFrame A DataFrame to represent column ancestralGroups from ancestries","title":"property ancestralGroups"},{"location":"Study/#property-countriesoforigin","text":"type: pandas.DataFrame A DataFrame to represent column countriesOfOrigin from ancestries","title":"property countriesOfOrigin"},{"location":"Study/#property-countriesofrecruitment","text":"type: pandas.DataFrame A DataFrame to represent column countriesOfOrigin from ancestries","title":"property countriesOfRecruitment"},{"location":"Trait/","text":"Trait class Trait.Trait() Python class to represent a set of GWAS Catalog EFO Trait. For more information, see \" GWAS CATALOG API Guide \" # get Tait by study_id from pandasgwas.get_traits import get_traits traits = get_traits(study_id='GCST000854') property efo_traits type: pandas.DataFrame A DataFrame to represent all queried EFO Traits from GWAS Catalog REST API","title":"Trait"},{"location":"Trait/#trait","text":"","title":"Trait"},{"location":"Trait/#class-traittrait","text":"Python class to represent a set of GWAS Catalog EFO Trait. For more information, see \" GWAS CATALOG API Guide \" # get Tait by study_id from pandasgwas.get_traits import get_traits traits = get_traits(study_id='GCST000854')","title":"class Trait.Trait()"},{"location":"Trait/#property-efo_traits","text":"type: pandas.DataFrame A DataFrame to represent all queried EFO Traits from GWAS Catalog REST API","title":"property efo_traits"},{"location":"get_SNPs/","text":"get_SNPs Get Single Nucleotide Polymorphism function based on different search criteria function get_variants_by_study_id(study_id: str, interactive: bool = True) -> SingleNucleotidePolymorphism Get GWAS Catalog Single Nucleotide Polymorphisms by Study identifier from pandasgwas.get_SNPs import get_variants_by_study_id snps = get_variants_by_study_id('GCST000854') param study_id Study identifier, accessionId in Study param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_variants_by_association_id(association_id: str, interactive: bool = True) -> SingleNucleotidePolymorphism Get GWAS Catalog Single Nucleotide Polymorphisms by by their Association identifier from pandasgwas.get_SNPs import get_variants_by_association_id snps = get_variants_by_association_id('16603') param association_id Association identifier, associationId in Association param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_variants_by_variant_id(variant_id: str, interactive: bool = True) -> SingleNucleotidePolymorphism Get GWAS Catalog Single Nucleotide Polymorphisms by Single Nucleotide Polymorphism identifier from pandasgwas.get_SNPs import get_variants_by_variant_id snps = get_variants_by_variant_id('rs7744020') param variant_id Single Nucleotide Polymorphism identifier, rsId in Single Nucleotide Polymorphism param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_variants_by_efo_id(efo_id: str, interactive: bool = True) -> SingleNucleotidePolymorphism Get GWAS Catalog Single Nucleotide Polymorphisms by their EFO Trait identifier from pandasgwas.get_SNPs import get_variants_by_efo_id snps = get_variants_by_efo_id('EFO_0001065') param efo_id EFO Trait identifier, shortForm in EFO Trait param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_variants_by_pubmed_id(pubmed_id: str, interactive: bool = True) -> SingleNucleotidePolymorphism Get GWAS Catalog Single Nucleotide Polymorphisms by PubMed identifiers from pandasgwas.get_SNPs import get_variants_by_pubmed_id snps = get_variants_by_pubmed_id('21041247') param pubmed_id PubMed identifier param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_variants_by_genomic_range(chromosome: str, start: int, end: int, interactive: bool = True) -> SingleNucleotidePolymorphism Get GWAS Catalog Single Nucleotide Polymorphisms from pandasgwas.get_SNPs import get_variants_by_genomic_range snps = get_variants_by_genomic_range('1', 2300001, 5300000) param chromosome Human chromosome names: autosomal and sexual chromosomes only, i.e., 1--22, X and Y param start Start position of range (starts at 1). param end End position of range (inclusive). param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_variants_by_cytogenetic_band(cytogenetic_band: str, interactive: bool = True) -> SingleNucleotidePolymorphism Get GWAS Catalog Single Nucleotide Polymorphisms from pandasgwas.get_SNPs import get_variants_by_cytogenetic_band snps = get_variants_by_cytogenetic_band('1p36.32') param cytogenetic_band Cytogenetic bands of the form '1p36.11' param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_variants_by_gene_name(gene_name: str, interactive: bool = True) -> SingleNucleotidePolymorphism Get GWAS Catalog Single Nucleotide Polymorphisms from pandasgwas.get_SNPs import get_variants_by_gene_name snps = get_variants_by_gene_name('KIAA0319') param gene_name Gene names param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_variants_by_efo_trait(efo_trait: str, interactive: bool = True) -> SingleNucleotidePolymorphism Get GWAS Catalog Single Nucleotide Polymorphisms that match trait description from pandasgwas.get_SNPs import get_variants_by_efo_trait snps = get_variants_by_efo_trait('MHPG measurement') param efo_trait Trait description param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_variants_by_reported_trait(reported_trait: str, interactive: bool = True) -> SingleNucleotidePolymorphism Get GWAS Catalog Single Nucleotide Polymorphisms that match the reported traits, as reported by the original authors of the study. from pandasgwas.get_SNPs import get_variants_by_reported_trait snps = get_variants_by_reported_trait(\"Dupuytren's disease\") param reported_trait Trait are reported by the original authors of the study param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_variants_all(interactive: bool = True) -> SingleNucleotidePolymorphism Get all Single Nucleotide Polymorphisms from pandasgwas.get_SNPs import get_variants_all snps = get_variants_all() param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_variants(study_id: str = None, association_id: str = None, variant_id: str = None, efo_id: str = None, pubmed_id: str = None, genomic_range: List[int] = None, gene_name: str = None, efo_trait: str = None, reported_trait: str = None, set_operation: str = 'bind', interactive: bool = True) -> SingleNucleotidePolymorphism Retrieves Single Nucleotide Polymorphisms via the NHGRI-EBI GWAS Catalog REST API. The REST API is queried multiple times with the criteria passed as arguments. By default all Single Nucleotide Polymorphisms that match the criteria supplied in the arguments are retrieved: this corresponds to the default set_operation set to 'bind', If you rather have only the Single Nucleotide Polymorphisms that match simultaneously all criteria provided, then set set_operation to 'intersection'.","title":"get_SNPs"},{"location":"get_SNPs/#get_snps","text":"Get Single Nucleotide Polymorphism function based on different search criteria","title":"get_SNPs"},{"location":"get_SNPs/#function-get_variants_by_study_idstudy_id-str-interactive-bool-true-singlenucleotidepolymorphism","text":"Get GWAS Catalog Single Nucleotide Polymorphisms by Study identifier from pandasgwas.get_SNPs import get_variants_by_study_id snps = get_variants_by_study_id('GCST000854')","title":"function get_variants_by_study_id(study_id: str, interactive: bool = True) -&gt; SingleNucleotidePolymorphism"},{"location":"get_SNPs/#param-study_id","text":"Study identifier, accessionId in Study","title":"param study_id"},{"location":"get_SNPs/#param-interactive","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_SNPs/#function-get_variants_by_association_idassociation_id-str-interactive-bool-true-singlenucleotidepolymorphism","text":"Get GWAS Catalog Single Nucleotide Polymorphisms by by their Association identifier from pandasgwas.get_SNPs import get_variants_by_association_id snps = get_variants_by_association_id('16603')","title":"function get_variants_by_association_id(association_id: str, interactive: bool = True) -&gt; SingleNucleotidePolymorphism"},{"location":"get_SNPs/#param-association_id","text":"Association identifier, associationId in Association","title":"param association_id"},{"location":"get_SNPs/#param-interactive_1","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_SNPs/#function-get_variants_by_variant_idvariant_id-str-interactive-bool-true-singlenucleotidepolymorphism","text":"Get GWAS Catalog Single Nucleotide Polymorphisms by Single Nucleotide Polymorphism identifier from pandasgwas.get_SNPs import get_variants_by_variant_id snps = get_variants_by_variant_id('rs7744020')","title":"function get_variants_by_variant_id(variant_id: str, interactive: bool = True) -&gt; SingleNucleotidePolymorphism"},{"location":"get_SNPs/#param-variant_id","text":"Single Nucleotide Polymorphism identifier, rsId in Single Nucleotide Polymorphism","title":"param variant_id"},{"location":"get_SNPs/#param-interactive_2","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_SNPs/#function-get_variants_by_efo_idefo_id-str-interactive-bool-true-singlenucleotidepolymorphism","text":"Get GWAS Catalog Single Nucleotide Polymorphisms by their EFO Trait identifier from pandasgwas.get_SNPs import get_variants_by_efo_id snps = get_variants_by_efo_id('EFO_0001065')","title":"function get_variants_by_efo_id(efo_id: str, interactive: bool = True) -&gt; SingleNucleotidePolymorphism"},{"location":"get_SNPs/#param-efo_id","text":"EFO Trait identifier, shortForm in EFO Trait","title":"param efo_id"},{"location":"get_SNPs/#param-interactive_3","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_SNPs/#function-get_variants_by_pubmed_idpubmed_id-str-interactive-bool-true-singlenucleotidepolymorphism","text":"Get GWAS Catalog Single Nucleotide Polymorphisms by PubMed identifiers from pandasgwas.get_SNPs import get_variants_by_pubmed_id snps = get_variants_by_pubmed_id('21041247')","title":"function get_variants_by_pubmed_id(pubmed_id: str, interactive: bool = True) -&gt; SingleNucleotidePolymorphism"},{"location":"get_SNPs/#param-pubmed_id","text":"PubMed identifier","title":"param pubmed_id"},{"location":"get_SNPs/#param-interactive_4","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_SNPs/#function-get_variants_by_genomic_rangechromosome-str-start-int-end-int-interactive-bool-true-singlenucleotidepolymorphism","text":"Get GWAS Catalog Single Nucleotide Polymorphisms from pandasgwas.get_SNPs import get_variants_by_genomic_range snps = get_variants_by_genomic_range('1', 2300001, 5300000)","title":"function get_variants_by_genomic_range(chromosome: str, start: int, end: int, interactive: bool = True) -&gt; SingleNucleotidePolymorphism"},{"location":"get_SNPs/#param-chromosome","text":"Human chromosome names: autosomal and sexual chromosomes only, i.e., 1--22, X and Y","title":"param chromosome"},{"location":"get_SNPs/#param-start","text":"Start position of range (starts at 1).","title":"param start"},{"location":"get_SNPs/#param-end","text":"End position of range (inclusive).","title":"param end"},{"location":"get_SNPs/#param-interactive_5","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_SNPs/#function-get_variants_by_cytogenetic_bandcytogenetic_band-str-interactive-bool-true-singlenucleotidepolymorphism","text":"Get GWAS Catalog Single Nucleotide Polymorphisms from pandasgwas.get_SNPs import get_variants_by_cytogenetic_band snps = get_variants_by_cytogenetic_band('1p36.32')","title":"function get_variants_by_cytogenetic_band(cytogenetic_band: str, interactive: bool = True) -&gt; SingleNucleotidePolymorphism"},{"location":"get_SNPs/#param-cytogenetic_band","text":"Cytogenetic bands of the form '1p36.11'","title":"param cytogenetic_band"},{"location":"get_SNPs/#param-interactive_6","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_SNPs/#function-get_variants_by_gene_namegene_name-str-interactive-bool-true-singlenucleotidepolymorphism","text":"Get GWAS Catalog Single Nucleotide Polymorphisms from pandasgwas.get_SNPs import get_variants_by_gene_name snps = get_variants_by_gene_name('KIAA0319')","title":"function get_variants_by_gene_name(gene_name: str, interactive: bool = True) -&gt; SingleNucleotidePolymorphism"},{"location":"get_SNPs/#param-gene_name","text":"Gene names","title":"param gene_name"},{"location":"get_SNPs/#param-interactive_7","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_SNPs/#function-get_variants_by_efo_traitefo_trait-str-interactive-bool-true-singlenucleotidepolymorphism","text":"Get GWAS Catalog Single Nucleotide Polymorphisms that match trait description from pandasgwas.get_SNPs import get_variants_by_efo_trait snps = get_variants_by_efo_trait('MHPG measurement')","title":"function get_variants_by_efo_trait(efo_trait: str, interactive: bool = True) -&gt; SingleNucleotidePolymorphism"},{"location":"get_SNPs/#param-efo_trait","text":"Trait description","title":"param efo_trait"},{"location":"get_SNPs/#param-interactive_8","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_SNPs/#function-get_variants_by_reported_traitreported_trait-str-interactive-bool-true-singlenucleotidepolymorphism","text":"Get GWAS Catalog Single Nucleotide Polymorphisms that match the reported traits, as reported by the original authors of the study. from pandasgwas.get_SNPs import get_variants_by_reported_trait snps = get_variants_by_reported_trait(\"Dupuytren's disease\")","title":"function get_variants_by_reported_trait(reported_trait: str, interactive: bool = True) -&gt; SingleNucleotidePolymorphism"},{"location":"get_SNPs/#param-reported_trait","text":"Trait are reported by the original authors of the study","title":"param reported_trait"},{"location":"get_SNPs/#param-interactive_9","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_SNPs/#function-get_variants_allinteractive-bool-true-singlenucleotidepolymorphism","text":"Get all Single Nucleotide Polymorphisms from pandasgwas.get_SNPs import get_variants_all snps = get_variants_all()","title":"function get_variants_all(interactive: bool = True) -&gt; SingleNucleotidePolymorphism"},{"location":"get_SNPs/#param-interactive_10","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_SNPs/#function-get_variantsstudy_id-str-none-association_id-str-none-variant_id-str-none-efo_id-str-none-pubmed_id-str-none-genomic_range-listint-none-gene_name-str-none-efo_trait-str-none-reported_trait-str-none-set_operation-str-bind-interactive-bool-true-singlenucleotidepolymorphism","text":"Retrieves Single Nucleotide Polymorphisms via the NHGRI-EBI GWAS Catalog REST API. The REST API is queried multiple times with the criteria passed as arguments. By default all Single Nucleotide Polymorphisms that match the criteria supplied in the arguments are retrieved: this corresponds to the default set_operation set to 'bind', If you rather have only the Single Nucleotide Polymorphisms that match simultaneously all criteria provided, then set set_operation to 'intersection'.","title":"function get_variants(study_id: str = None, association_id: str = None, variant_id: str = None, efo_id: str = None, pubmed_id: str = None, genomic_range: List[int] = None, gene_name: str = None, efo_trait: str = None, reported_trait: str = None, set_operation: str = 'bind', interactive: bool = True) -&gt; SingleNucleotidePolymorphism"},{"location":"get_associations/","text":"get_associations Get Association function based on different search criteria function get_associations_by_study_id(study_id: str, interactive: bool = True) -> Association Get GWAS Catalog Associations by Study identifier from pandasgwas.get_associations import * associations = get_associations_by_study_id('GCST000854') param study_id Study identifier, accessionId in Study param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_associations_by_association_id(association_id: str, interactive: bool = True) -> Association Get GWAS Catalog Associations by their Association identifier from pandasgwas.get_associations import * associations = get_associations_by_association_id('16603') param association_id Association identifier, associationId in Association param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_associations_by_variant_id(variant_id: str, interactive: bool = True) -> Association Get GWAS Catalog Associations by their Single Nucleotide Polymorphism identifier from pandasgwas.get_associations import * associations = get_associations_by_variant_id('rs6538678') param variant_id Single Nucleotide Polymorphism identifier, rsId in Single Nucleotide Polymorphism param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_associations_by_efo_id(efo_id: str, interactive: bool = True) -> Association Get GWAS Catalog Associations by their EFO Trait identifier from pandasgwas.get_associations import * associations = get_associations_by_efo_id('EFO_0001065') param efo_id EFO Trait identifier, shortForm in EFO Trait param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_associations_by_pubmed_id(pubmed_id: str, interactive: bool = True) -> Association Get GWAS Catalog associations by PubMed identifiers from pandasgwas.get_associations import * associations = get_associations_by_pubmed_id('21041247') param pubmed_id PubMed identifier param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_associations_by_efo_trait(efo_trait: str, interactive: bool = True) -> Association Gets associations that match trait description from pandasgwas.get_associations import * associations = get_associations_by_efo_trait('MHPG measurement') param efo_trait Trait description param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_associations_all(interactive: bool = True) -> Association Gets all associations from pandasgwas.get_associations import * associations = get_associations_all() param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_associations(study_id: str = None, association_id: str = None, variant_id: str = None, efo_id: str = None,pubmed_id: str = None, efo_trait: str = None, set_operation: str = 'bind',interactive: bool = True) -> Association Retrieves Associations via the NHGRI-EBI GWAS Catalog REST API. The REST API is queried multiple times with the criteria passed as arguments. By default all Associations that match the criteria supplied in the arguments are retrieved: this corresponds to the default set_operation set to 'bind', If you rather have only the Associations that match simultaneously all criteria provided, then set set_operation to 'intersection'.","title":"get_associations"},{"location":"get_associations/#get_associations","text":"Get Association function based on different search criteria","title":"get_associations"},{"location":"get_associations/#function-get_associations_by_study_idstudy_id-str-interactive-bool-true-association","text":"Get GWAS Catalog Associations by Study identifier from pandasgwas.get_associations import * associations = get_associations_by_study_id('GCST000854')","title":"function get_associations_by_study_id(study_id: str, interactive: bool = True) -&gt; Association"},{"location":"get_associations/#param-study_id","text":"Study identifier, accessionId in Study","title":"param study_id"},{"location":"get_associations/#param-interactive","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_associations/#function-get_associations_by_association_idassociation_id-str-interactive-bool-true-association","text":"Get GWAS Catalog Associations by their Association identifier from pandasgwas.get_associations import * associations = get_associations_by_association_id('16603')","title":"function get_associations_by_association_id(association_id: str, interactive: bool = True) -&gt; Association"},{"location":"get_associations/#param-association_id","text":"Association identifier, associationId in Association","title":"param association_id"},{"location":"get_associations/#param-interactive_1","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_associations/#function-get_associations_by_variant_idvariant_id-str-interactive-bool-true-association","text":"Get GWAS Catalog Associations by their Single Nucleotide Polymorphism identifier from pandasgwas.get_associations import * associations = get_associations_by_variant_id('rs6538678')","title":"function get_associations_by_variant_id(variant_id: str, interactive: bool = True) -&gt; Association"},{"location":"get_associations/#param-variant_id","text":"Single Nucleotide Polymorphism identifier, rsId in Single Nucleotide Polymorphism","title":"param variant_id"},{"location":"get_associations/#param-interactive_2","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_associations/#function-get_associations_by_efo_idefo_id-str-interactive-bool-true-association","text":"Get GWAS Catalog Associations by their EFO Trait identifier from pandasgwas.get_associations import * associations = get_associations_by_efo_id('EFO_0001065')","title":"function get_associations_by_efo_id(efo_id: str, interactive: bool = True) -&gt; Association"},{"location":"get_associations/#param-efo_id","text":"EFO Trait identifier, shortForm in EFO Trait","title":"param efo_id"},{"location":"get_associations/#param-interactive_3","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_associations/#function-get_associations_by_pubmed_idpubmed_id-str-interactive-bool-true-association","text":"Get GWAS Catalog associations by PubMed identifiers from pandasgwas.get_associations import * associations = get_associations_by_pubmed_id('21041247')","title":"function get_associations_by_pubmed_id(pubmed_id: str, interactive: bool = True) -&gt; Association"},{"location":"get_associations/#param-pubmed_id","text":"PubMed identifier","title":"param pubmed_id"},{"location":"get_associations/#param-interactive_4","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_associations/#function-get_associations_by_efo_traitefo_trait-str-interactive-bool-true-association","text":"Gets associations that match trait description from pandasgwas.get_associations import * associations = get_associations_by_efo_trait('MHPG measurement')","title":"function get_associations_by_efo_trait(efo_trait: str, interactive: bool = True) -&gt; Association"},{"location":"get_associations/#param-efo_trait","text":"Trait description","title":"param efo_trait"},{"location":"get_associations/#param-interactive_5","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_associations/#function-get_associations_allinteractive-bool-true-association","text":"Gets all associations from pandasgwas.get_associations import * associations = get_associations_all()","title":"function get_associations_all(interactive: bool = True) -&gt; Association"},{"location":"get_associations/#param-interactive_6","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_associations/#function-get_associationsstudy_id-str-none-association_id-str-none-variant_id-str-none-efo_id-str-nonepubmed_id-str-none-efo_trait-str-none-set_operation-str-bindinteractive-bool-true-association","text":"Retrieves Associations via the NHGRI-EBI GWAS Catalog REST API. The REST API is queried multiple times with the criteria passed as arguments. By default all Associations that match the criteria supplied in the arguments are retrieved: this corresponds to the default set_operation set to 'bind', If you rather have only the Associations that match simultaneously all criteria provided, then set set_operation to 'intersection'.","title":"function get_associations(study_id: str = None, association_id: str = None, variant_id: str = None, efo_id: str = None,pubmed_id: str = None, efo_trait: str = None, set_operation: str = 'bind',interactive: bool = True) -&gt; Association"},{"location":"get_studies/","text":"get_studies Get Study function based on different search criteria function get_studies_by_study_id(study_id: str, interactive: bool = True) -> Study Get GWAS Catalog Studies by Study identifier from pandasgwas.get_studies import get_studies_by_study_id studies = get_studies_by_study_id('GCST000854') param study_id Study identifier, accessionId in Study param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_studies_by_association_id(association_id: str, interactive: bool = True) -> Study Get GWAS Catalog Studies by by their Association identifier from pandasgwas.get_studies import get_studies_by_association_id studies = get_studies_by_association_id('16510553') param association_id Association identifier, associationId in Association param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_studies_by_variant_id(variant_id: str, interactive: bool = True) -> Study Get GWAS Catalog Studies by Single Nucleotide Polymorphism identifier from pandasgwas.get_studies import get_studies_by_variant_id studies = get_studies_by_variant_id('rs7329174') param variant_id Single Nucleotide Polymorphism identifier, rsId in Single Nucleotide Polymorphism param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_studies_by_efo_id(efo_id: str, interactive: bool = True) -> Study Get GWAS Catalog Studies by their EFO Trait identifier from pandasgwas.get_studies import get_studies_by_efo_id studies = get_studies_by_efo_id('EFO_0005133') param efo_id EFO Trait identifier, shortForm in EFO Trait param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_studies_by_pubmed_id(pubmed_id: str, interactive: bool = True) -> Study Get GWAS Catalog Studies by PubMed identifiers from pandasgwas.get_studies import get_studies_by_pubmed_id studies = get_studies_by_pubmed_id('21041247') param pubmed_id PubMed identifier param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_studies_by_user_requested(user_requested: bool, interactive: bool = True) -> Study Get GWAS Catalog Studies that have been requested by users or not from pandasgwas.get_studies import get_studies_by_user_requested studies = get_studies_by_user_requested('True') param user_requested Whether the addition of this study to the Catalog was requested by a user param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_studies_by_full_pvalue_set(full_pvalue_set: bool, interactive: bool = True) -> Study Get GWAS Catalog Studies by full summary statistics criterion from pandasgwas.get_studies import get_studies_by_full_pvalue_set studies = get_studies_by_full_pvalue_set('False') param full_pvalue_set Whether full summary statistics are available for this study param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_studies_by_efo_uri(efo_uri: str, interactive: bool = True) -> Study Get GWAS Catalog Studies by EFO URI from pandasgwas.get_studies import get_studies_by_efo_uri studies = get_studies_by_efo_uri('http://www.ebi.ac.uk/efo/EFO_0005133') param efo_uri EFO URI param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_studies_by_efo_trait(efo_trait: str, interactive: bool = True) -> Study Get GWAS Catalog Studies that match trait description from pandasgwas.get_studies import get_studies_by_efo_trait studies = get_studies_by_efo_trait('MHPG measurement') param efo_trait Trait description param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_studies_by_reported_trait(reported_trait: str, interactive: bool = True) -> Study Gets studies that match the reported traits, as reported by the original authors of the study. from pandasgwas.get_studies import get_studies_by_reported_trait studies = get_studies_by_reported_trait('Vitamin D levels') param reported_trait Trait are reported by the original authors of the study param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_studies_all(interactive: bool = True) -> Study Gets all Studies from pandasgwas.get_studies import get_studies_all studies = get_studies_all() param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_studies(study_id: str = None, association_id: str = None, variant_id: str = None, efo_id: str = None,pubmed_id: str = None, user_requested: bool = None,full_pvalue_set: bool = None, efo_uri: str = None, efo_trait: str = None, reported_trait: str = None,set_operation: str = 'bind',interactive: bool = True) -> Study Retrieves Studies via the NHGRI-EBI GWAS Catalog REST API. The REST API is queried multiple times with the criteria passed as arguments. By default all Studies that match the criteria supplied in the arguments are retrieved: this corresponds to the default set_operation set to 'bind', If you rather have only the Studies that match simultaneously all criteria provided, then set set_operation to 'intersection'.","title":"get_studies"},{"location":"get_studies/#get_studies","text":"Get Study function based on different search criteria","title":"get_studies"},{"location":"get_studies/#function-get_studies_by_study_idstudy_id-str-interactive-bool-true-study","text":"Get GWAS Catalog Studies by Study identifier from pandasgwas.get_studies import get_studies_by_study_id studies = get_studies_by_study_id('GCST000854')","title":"function get_studies_by_study_id(study_id: str, interactive: bool = True) -&gt; Study"},{"location":"get_studies/#param-study_id","text":"Study identifier, accessionId in Study","title":"param study_id"},{"location":"get_studies/#param-interactive","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_studies/#function-get_studies_by_association_idassociation_id-str-interactive-bool-true-study","text":"Get GWAS Catalog Studies by by their Association identifier from pandasgwas.get_studies import get_studies_by_association_id studies = get_studies_by_association_id('16510553')","title":"function get_studies_by_association_id(association_id: str, interactive: bool = True) -&gt; Study"},{"location":"get_studies/#param-association_id","text":"Association identifier, associationId in Association","title":"param association_id"},{"location":"get_studies/#param-interactive_1","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_studies/#function-get_studies_by_variant_idvariant_id-str-interactive-bool-true-study","text":"Get GWAS Catalog Studies by Single Nucleotide Polymorphism identifier from pandasgwas.get_studies import get_studies_by_variant_id studies = get_studies_by_variant_id('rs7329174')","title":"function get_studies_by_variant_id(variant_id: str, interactive: bool = True) -&gt; Study"},{"location":"get_studies/#param-variant_id","text":"Single Nucleotide Polymorphism identifier, rsId in Single Nucleotide Polymorphism","title":"param variant_id"},{"location":"get_studies/#param-interactive_2","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_studies/#function-get_studies_by_efo_idefo_id-str-interactive-bool-true-study","text":"Get GWAS Catalog Studies by their EFO Trait identifier from pandasgwas.get_studies import get_studies_by_efo_id studies = get_studies_by_efo_id('EFO_0005133')","title":"function get_studies_by_efo_id(efo_id: str, interactive: bool = True) -&gt; Study"},{"location":"get_studies/#param-efo_id","text":"EFO Trait identifier, shortForm in EFO Trait","title":"param efo_id"},{"location":"get_studies/#param-interactive_3","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_studies/#function-get_studies_by_pubmed_idpubmed_id-str-interactive-bool-true-study","text":"Get GWAS Catalog Studies by PubMed identifiers from pandasgwas.get_studies import get_studies_by_pubmed_id studies = get_studies_by_pubmed_id('21041247')","title":"function get_studies_by_pubmed_id(pubmed_id: str, interactive: bool = True) -&gt; Study"},{"location":"get_studies/#param-pubmed_id","text":"PubMed identifier","title":"param pubmed_id"},{"location":"get_studies/#param-interactive_4","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_studies/#function-get_studies_by_user_requesteduser_requested-bool-interactive-bool-true-study","text":"Get GWAS Catalog Studies that have been requested by users or not from pandasgwas.get_studies import get_studies_by_user_requested studies = get_studies_by_user_requested('True')","title":"function get_studies_by_user_requested(user_requested: bool, interactive: bool = True) -&gt; Study"},{"location":"get_studies/#param-user_requested","text":"Whether the addition of this study to the Catalog was requested by a user","title":"param user_requested"},{"location":"get_studies/#param-interactive_5","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_studies/#function-get_studies_by_full_pvalue_setfull_pvalue_set-bool-interactive-bool-true-study","text":"Get GWAS Catalog Studies by full summary statistics criterion from pandasgwas.get_studies import get_studies_by_full_pvalue_set studies = get_studies_by_full_pvalue_set('False')","title":"function get_studies_by_full_pvalue_set(full_pvalue_set: bool, interactive: bool = True) -&gt; Study"},{"location":"get_studies/#param-full_pvalue_set","text":"Whether full summary statistics are available for this study","title":"param full_pvalue_set"},{"location":"get_studies/#param-interactive_6","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_studies/#function-get_studies_by_efo_uriefo_uri-str-interactive-bool-true-study","text":"Get GWAS Catalog Studies by EFO URI from pandasgwas.get_studies import get_studies_by_efo_uri studies = get_studies_by_efo_uri('http://www.ebi.ac.uk/efo/EFO_0005133')","title":"function get_studies_by_efo_uri(efo_uri: str, interactive: bool = True) -&gt; Study"},{"location":"get_studies/#param-efo_uri","text":"EFO URI","title":"param efo_uri"},{"location":"get_studies/#param-interactive_7","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_studies/#function-get_studies_by_efo_traitefo_trait-str-interactive-bool-true-study","text":"Get GWAS Catalog Studies that match trait description from pandasgwas.get_studies import get_studies_by_efo_trait studies = get_studies_by_efo_trait('MHPG measurement')","title":"function get_studies_by_efo_trait(efo_trait: str, interactive: bool = True) -&gt; Study"},{"location":"get_studies/#param-efo_trait","text":"Trait description","title":"param efo_trait"},{"location":"get_studies/#param-interactive_8","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_studies/#function-get_studies_by_reported_traitreported_trait-str-interactive-bool-true-study","text":"Gets studies that match the reported traits, as reported by the original authors of the study. from pandasgwas.get_studies import get_studies_by_reported_trait studies = get_studies_by_reported_trait('Vitamin D levels')","title":"function get_studies_by_reported_trait(reported_trait: str, interactive: bool = True) -&gt; Study"},{"location":"get_studies/#param-reported_trait","text":"Trait are reported by the original authors of the study","title":"param reported_trait"},{"location":"get_studies/#param-interactive_9","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_studies/#function-get_studies_allinteractive-bool-true-study","text":"Gets all Studies from pandasgwas.get_studies import get_studies_all studies = get_studies_all()","title":"function get_studies_all(interactive: bool = True) -&gt; Study"},{"location":"get_studies/#param-interactive_10","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_studies/#function-get_studiesstudy_id-str-none-association_id-str-none-variant_id-str-none-efo_id-str-nonepubmed_id-str-none-user_requested-bool-nonefull_pvalue_set-bool-none-efo_uri-str-none-efo_trait-str-none-reported_trait-str-noneset_operation-str-bindinteractive-bool-true-study","text":"Retrieves Studies via the NHGRI-EBI GWAS Catalog REST API. The REST API is queried multiple times with the criteria passed as arguments. By default all Studies that match the criteria supplied in the arguments are retrieved: this corresponds to the default set_operation set to 'bind', If you rather have only the Studies that match simultaneously all criteria provided, then set set_operation to 'intersection'.","title":"function get_studies(study_id: str = None, association_id: str = None, variant_id: str = None, efo_id: str = None,pubmed_id: str = None, user_requested: bool = None,full_pvalue_set: bool = None, efo_uri: str = None, efo_trait: str = None, reported_trait: str = None,set_operation: str = 'bind',interactive: bool = True) -&gt; Study"},{"location":"get_traits/","text":"get_traits Get EFO Trait function based on different search criteria function get_traits_by_study_id(study_id: str, interactive: bool = True) -> Trait Get GWAS Catalog EFO Traits by Study identifier from pandasgwas.get_traits import get_traits_by_study_id traits = get_traits_by_study_id('GCST000854') param study_id Study identifier, accessionId in Study param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_traits_by_association_id(association_id: str, interactive: bool = True) -> Trait Get GWAS Catalog EFO Traits by their Association identifier from pandasgwas.get_traits import get_traits_by_association_id traits = get_traits_by_association_id('16603') param association_id Association identifier, associationId in Association param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_traits_by_efo_id(efo_id: str, interactive: bool = True) -> Trait Get GWAS Catalog EFO Traits by their EFO Trait identifier from pandasgwas.get_traits import get_traits_by_efo_id traits = get_traits_by_efo_id('EFO_0001065') param efo_id EFO Trait identifier, shortForm in EFO Trait param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_traits_by_pubmed_id(pubmed_id: str, interactive: bool = True) -> Trait Get GWAS Catalog EFO Traits by PubMed identifiers from pandasgwas.get_traits import get_traits_by_pubmed_id traits = get_traits_by_pubmed_id('21041247') param pubmed_id PubMed identifier param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_traits_by_efo_uri(efo_uri: str, interactive: bool = True) -> Trait Get GWAS Catalog EFO Traits by EFO URI from pandasgwas.get_traits import get_traits_by_efo_uri traits = get_traits_by_efo_uri('http://www.ebi.ac.uk/efo/EFO_0005133') param efo_uri EFO URI param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_traits_by_efo_trait(efo_trait: str, interactive: bool = True) -> Trait Get GWAS Catalog EFO Traits that match trait description from pandasgwas.get_traits import get_traits_by_efo_trait traits = get_traits_by_efo_trait('MHPG measurement') param efo_trait Trait description param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_traits_all(interactive: bool = True) -> Trait Gets all EFO Trats from pandasgwas.get_traits import get_traits_all traits = get_traits_all() param interactive Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download. function get_traits(study_id: str = None, association_id: str = None, efo_id=None, pubmed_id: str = None,efo_uri: str = None, efo_trait: str = None, set_operation: str = 'bind',interactive: bool = True) -> Trait Retrieves EFO Traits via the NHGRI-EBI GWAS Catalog REST API. The REST API is queried multiple times with the criteria passed as arguments. By default all EFO Traits that match the criteria supplied in the arguments are retrieved: this corresponds to the default set_operation set to 'bind', If you rather have only the EFO Traits that match simultaneously all criteria provided, then set set_operation to 'intersection'.","title":"get_traits"},{"location":"get_traits/#get_traits","text":"Get EFO Trait function based on different search criteria","title":"get_traits"},{"location":"get_traits/#function-get_traits_by_study_idstudy_id-str-interactive-bool-true-trait","text":"Get GWAS Catalog EFO Traits by Study identifier from pandasgwas.get_traits import get_traits_by_study_id traits = get_traits_by_study_id('GCST000854')","title":"function get_traits_by_study_id(study_id: str, interactive: bool = True) -&gt; Trait"},{"location":"get_traits/#param-study_id","text":"Study identifier, accessionId in Study","title":"param study_id"},{"location":"get_traits/#param-interactive","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_traits/#function-get_traits_by_association_idassociation_id-str-interactive-bool-true-trait","text":"Get GWAS Catalog EFO Traits by their Association identifier from pandasgwas.get_traits import get_traits_by_association_id traits = get_traits_by_association_id('16603')","title":"function get_traits_by_association_id(association_id: str, interactive: bool = True) -&gt; Trait"},{"location":"get_traits/#param-association_id","text":"Association identifier, associationId in Association","title":"param association_id"},{"location":"get_traits/#param-interactive_1","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_traits/#function-get_traits_by_efo_idefo_id-str-interactive-bool-true-trait","text":"Get GWAS Catalog EFO Traits by their EFO Trait identifier from pandasgwas.get_traits import get_traits_by_efo_id traits = get_traits_by_efo_id('EFO_0001065')","title":"function get_traits_by_efo_id(efo_id: str, interactive: bool = True) -&gt; Trait"},{"location":"get_traits/#param-efo_id","text":"EFO Trait identifier, shortForm in EFO Trait","title":"param efo_id"},{"location":"get_traits/#param-interactive_2","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_traits/#function-get_traits_by_pubmed_idpubmed_id-str-interactive-bool-true-trait","text":"Get GWAS Catalog EFO Traits by PubMed identifiers from pandasgwas.get_traits import get_traits_by_pubmed_id traits = get_traits_by_pubmed_id('21041247')","title":"function get_traits_by_pubmed_id(pubmed_id: str, interactive: bool = True) -&gt; Trait"},{"location":"get_traits/#param-pubmed_id","text":"PubMed identifier","title":"param pubmed_id"},{"location":"get_traits/#param-interactive_3","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_traits/#function-get_traits_by_efo_uriefo_uri-str-interactive-bool-true-trait","text":"Get GWAS Catalog EFO Traits by EFO URI from pandasgwas.get_traits import get_traits_by_efo_uri traits = get_traits_by_efo_uri('http://www.ebi.ac.uk/efo/EFO_0005133')","title":"function get_traits_by_efo_uri(efo_uri: str, interactive: bool = True) -&gt; Trait"},{"location":"get_traits/#param-efo_uri","text":"EFO URI","title":"param efo_uri"},{"location":"get_traits/#param-interactive_4","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_traits/#function-get_traits_by_efo_traitefo_trait-str-interactive-bool-true-trait","text":"Get GWAS Catalog EFO Traits that match trait description from pandasgwas.get_traits import get_traits_by_efo_trait traits = get_traits_by_efo_trait('MHPG measurement')","title":"function get_traits_by_efo_trait(efo_trait: str, interactive: bool = True) -&gt; Trait"},{"location":"get_traits/#param-efo_trait","text":"Trait description","title":"param efo_trait"},{"location":"get_traits/#param-interactive_5","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_traits/#function-get_traits_allinteractive-bool-true-trait","text":"Gets all EFO Trats from pandasgwas.get_traits import get_traits_all traits = get_traits_all()","title":"function get_traits_all(interactive: bool = True) -&gt; Trait"},{"location":"get_traits/#param-interactive_6","text":"Indicates whether to run in interactive mode, when the value is True and the query data is divided into many pages, the function will prompt whether to continue the download.","title":"param interactive"},{"location":"get_traits/#function-get_traitsstudy_id-str-none-association_id-str-none-efo_idnone-pubmed_id-str-noneefo_uri-str-none-efo_trait-str-none-set_operation-str-bindinteractive-bool-true-trait","text":"Retrieves EFO Traits via the NHGRI-EBI GWAS Catalog REST API. The REST API is queried multiple times with the criteria passed as arguments. By default all EFO Traits that match the criteria supplied in the arguments are retrieved: this corresponds to the default set_operation set to 'bind', If you rather have only the EFO Traits that match simultaneously all criteria provided, then set set_operation to 'intersection'.","title":"function get_traits(study_id: str = None, association_id: str = None, efo_id=None, pubmed_id: str = None,efo_uri: str = None, efo_trait: str = None, set_operation: str = 'bind',interactive: bool = True) -&gt; Trait"},{"location":"set_operation/","text":"set_operation Set operations for objects of same class # set operation in EFO Trait from pandasgwas.get_traits import get_traits from pandasgwas.set_operation import * traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 + traits2 traits3 = bind(traits1, traits2) traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 & traits2 traits3 = intersect(traits1, traits2) traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 - traits2 traits3 = set_diff(traits1, traits2) traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 ^ traits2 traits3 = set_xor(traits1, traits2) traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 | traits2 traits3 = union(traits1, traits2) traits1 = get_traits(study_id='GCST000854') traits2 = get_traits(study_id='GCST000854') #Equivalent to traits1 == traits2 set_equal(traits1, traits2) function bind(a,b)->c Binds together GWAS Catalog objects of the same class. Note that bind() preserves duplicates whereas union() does not. function intersect(a,b)->c Returns the data common to both A and B, with no repetitions function set_diff(a,b)->c returns the data in A that is not in B, with no repetitions function set_xor(a,b)->c returns the data of A and B that are not in their intersection (the symmetric difference), with no repetitions function union(a,b)->c returns the combined data from A and B with no repetitions function set_equal(a,b)->bool Check if the raw data of a and b are equal","title":"set_operation"},{"location":"set_operation/#set_operation","text":"Set operations for objects of same class # set operation in EFO Trait from pandasgwas.get_traits import get_traits from pandasgwas.set_operation import * traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 + traits2 traits3 = bind(traits1, traits2) traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 & traits2 traits3 = intersect(traits1, traits2) traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 - traits2 traits3 = set_diff(traits1, traits2) traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 ^ traits2 traits3 = set_xor(traits1, traits2) traits1 = get_traits(study_id='GCST000854', efo_id='EFO_0001065') traits2 = get_traits(study_id='GCST000854', efo_uri='http://www.ebi.ac.uk/efo/EFO_0005133') #Equivalent to traits3 = traits1 | traits2 traits3 = union(traits1, traits2) traits1 = get_traits(study_id='GCST000854') traits2 = get_traits(study_id='GCST000854') #Equivalent to traits1 == traits2 set_equal(traits1, traits2)","title":"set_operation"},{"location":"set_operation/#function-bindab-c","text":"Binds together GWAS Catalog objects of the same class. Note that bind() preserves duplicates whereas union() does not.","title":"function bind(a,b)-&gt;c"},{"location":"set_operation/#function-intersectab-c","text":"Returns the data common to both A and B, with no repetitions","title":"function intersect(a,b)-&gt;c"},{"location":"set_operation/#function-set_diffab-c","text":"returns the data in A that is not in B, with no repetitions","title":"function set_diff(a,b)-&gt;c"},{"location":"set_operation/#function-set_xorab-c","text":"returns the data of A and B that are not in their intersection (the symmetric difference), with no repetitions","title":"function set_xor(a,b)-&gt;c"},{"location":"set_operation/#function-unionab-c","text":"returns the combined data from A and B with no repetitions","title":"function union(a,b)-&gt;c"},{"location":"set_operation/#function-set_equalab-bool","text":"Check if the raw data of a and b are equal","title":"function set_equal(a,b)-&gt;bool"}]}